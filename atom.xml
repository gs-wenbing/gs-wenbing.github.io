<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wenbing-blog</title>
  
  <subtitle>记录生活记录你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wblog.work/"/>
  <updated>2019-10-09T03:12:19.385Z</updated>
  <id>http://www.wblog.work/</id>
  
  <author>
    <name>gs-wenbing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rxjava2 - timer-interval-range-intervalRange示例和详细解析</title>
    <link href="http://www.wblog.work/Rxjava2-timer-interval-range-intervalRange%E7%A4%BA%E4%BE%8B%E5%92%8C%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.wblog.work/Rxjava2-timer-interval-range-intervalRange示例和详细解析/</id>
    <published>2019-10-08T05:22:27.000Z</published>
    <updated>2019-10-09T03:12:19.385Z</updated>
    
    <content type="html"><![CDATA[<p>Rxjava2 - timer/interval/range/intervalRange示例和详细解析</p><a id="more"></a><h4 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h4><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Observable.timer(<span class="number">5</span>, TimeUnit.SECONDS)</span><br><span class="line">          .subscribe(myObserver());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Observer&lt;? <span class="keyword">super</span> Long&gt; myObserver() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onSubscribe"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"接收-----&gt;"</span> + aLong);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onComplete"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">15</span>:<span class="number">37</span>:<span class="number">06.813</span> <span class="number">12178</span><span class="number">-12178</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onSubscribe</span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">15</span>:<span class="number">37</span>:<span class="number">11.817</span> <span class="number">12178</span><span class="number">-12208</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">0</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">15</span>:<span class="number">37</span>:<span class="number">11.817</span> <span class="number">12178</span><span class="number">-12208</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onComplete</span><br></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>返回一个Observable，它在延迟一段给定的时间（5s）后发射一个简单的数字0。</p><p>操作符默认在computation调度器上执行。有一个变体可以通过可选参数指定Scheduler。</p><p>比如指定在newThread线程：<br><code>Observable.timer(5, TimeUnit.SECONDS, Schedulers.newThread())</code></p><h4 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h4><p>Interval操作符返回一个Observable，它按固定的时间间隔（2s）发射一个无限递增的整数序列。</p><p>interval默认在computation调度器上执行。你也可以传递一个可选的Scheduler参数来指定调度器。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延迟 5s，间隔 2s，发送无限增长的 Long 型数列</span></span><br><span class="line">Observable.<span class="built_in">int</span>erval(<span class="number">5</span>,<span class="number">2</span>,TimeUnit.SECONDS)</span><br><span class="line">          .subscribe(myObserver());</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">45.407</span> <span class="number">13381</span><span class="number">-13381</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onSubscribe</span><br><span class="line"><span class="comment">//延时了5s执行，间隔是2s</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">50.410</span> <span class="number">13381</span><span class="number">-13410</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">0</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">52.411</span> <span class="number">13381</span><span class="number">-13410</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">1</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">54.411</span> <span class="number">13381</span><span class="number">-13410</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">2</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">56.410</span> <span class="number">13381</span><span class="number">-13410</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">3</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">58.410</span> <span class="number">13381</span><span class="number">-13410</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">4</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">30</span>:<span class="number">00.411</span> <span class="number">13381</span><span class="number">-13410</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">5</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>interval有四个重载方法：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延时和间隔都是 period</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Observable&lt;<span class="keyword">Long</span>&gt; interval(<span class="keyword">long</span> period, TimeUnit unit)</span><br><span class="line"><span class="comment">// 延时initialDelay，间隔 period</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Observable&lt;<span class="keyword">Long</span>&gt; interval(<span class="keyword">long</span> initialDelay, <span class="keyword">long</span> period, TimeUnit unit)</span><br><span class="line"><span class="comment">// 延时和间隔都是 period，指定Scheduler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Observable&lt;<span class="keyword">Long</span>&gt; interval(<span class="keyword">long</span> period, TimeUnit unit, Scheduler scheduler)</span><br><span class="line"><span class="comment">// 延时initialDelay，间隔 period，指定Scheduler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Observable&lt;<span class="keyword">Long</span>&gt; interval(<span class="keyword">long</span> initialDelay, <span class="keyword">long</span> period, TimeUnit unit, Scheduler scheduler)</span><br></pre></td></tr></table></figure><h4 id="range-和-rangeLong"><a href="#range-和-rangeLong" class="headerlink" title="range 和 rangeLong"></a>range 和 rangeLong</h4><p>Range操作符发射一个范围内的有序整数序列，你可以指定范围的起始和长度。</p><p>RxJava将这个操作符实现为range函数，它接受两个参数，一个是范围的起始值，一个是范围的数据的数目。如果你将第二个参数设为0，将导致Observable不发射任何数据（如果设置为负数，会抛异常）。</p><p>range默认不在任何特定的调度器上执行。有一个变体可以通过可选参数指定Scheduler。</p><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 2 开始发送 5 个数据，区间为 [2,7)</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Observable</span>.</span></span>range<span class="constructor">Long(2,5)</span></span><br><span class="line">          .subscribe(my<span class="constructor">Observer()</span>);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">04.780</span> <span class="number">14035</span><span class="number">-14035</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onSubscribe</span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">04.780</span> <span class="number">14035</span><span class="number">-14035</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">2</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">04.780</span> <span class="number">14035</span><span class="number">-14035</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">3</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">04.780</span> <span class="number">14035</span><span class="number">-14035</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">4</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">04.780</span> <span class="number">14035</span><span class="number">-14035</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">5</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">04.780</span> <span class="number">14035</span><span class="number">-14035</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">6</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">14</span>:<span class="number">04.780</span> <span class="number">14035</span><span class="number">-14035</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onComplete</span><br></pre></td></tr></table></figure><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><h4 id="intervalRange"><a href="#intervalRange" class="headerlink" title="intervalRange"></a>intervalRange</h4><p>intervalRange 可以指定发送事件的开始值和数量，用法和interval相同</p><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延迟 2s, 间隔 1s,从 2 开始发送 5 个数据</span></span><br><span class="line">Observable.<span class="built_in">int</span>ervalRange(<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,TimeUnit.SECONDS)</span><br><span class="line">                .subscribe(myObserver());</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">46.587</span> <span class="number">14314</span><span class="number">-14314</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onSubscribe</span><br><span class="line"><span class="comment">//延时了2s执行，间隔是1s</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">48.589</span> <span class="number">14314</span><span class="number">-14348</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">2</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">49.589</span> <span class="number">14314</span><span class="number">-14348</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">3</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">50.589</span> <span class="number">14314</span><span class="number">-14348</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">4</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">51.589</span> <span class="number">14314</span><span class="number">-14348</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">5</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">52.588</span> <span class="number">14314</span><span class="number">-14348</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: 接收-----&gt;<span class="number">6</span></span><br><span class="line"><span class="number">08</span><span class="number">-26</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">52.588</span> <span class="number">14314</span><span class="number">-14348</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onComplete</span><br></pre></td></tr></table></figure><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rxjava2 - timer/interval/range/intervalRange示例和详细解析&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RxJava2" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/RxJava2/"/>
    
    
      <category term="Rxjava" scheme="http://www.wblog.work/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 - defer示例和详细解析</title>
    <link href="http://www.wblog.work/Rxjava2-defer%E7%A4%BA%E4%BE%8B%E5%92%8C%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.wblog.work/Rxjava2-defer示例和详细解析/</id>
    <published>2019-10-08T05:21:27.000Z</published>
    <updated>2019-10-09T03:11:41.875Z</updated>
    
    <content type="html"><![CDATA[<p>defer示例和详细解析</p><a id="more"></a><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建被观察者</span></span><br><span class="line"><span class="comment"> * @return ObservableSource</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">private ObservableSource&lt;? extends <span class="type">Integer</span>&gt; getSource() &#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.<span class="keyword">create</span>(<span class="built_in">new</span> ObservableOnSubscribe&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="built_in">public</span> <span class="type">void</span> subscribe(ObservableEmitter&lt;<span class="type">Integer</span>&gt; emitter) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("发射-----&gt;" + Thread.currentThread().getName() + "--:" + <span class="number">1</span>);</span><br><span class="line">            emitter.onNext(<span class="number">1</span>);</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建观察者</span></span><br><span class="line"><span class="comment"> * @return Observer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">private Observer&lt;? super <span class="type">Integer</span>&gt; getObserver() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">new</span> Observer&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="built_in">public</span> <span class="type">void</span> onSubscribe(Disposable d) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("onSubscribe");</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="built_in">public</span> <span class="type">void</span> onNext(<span class="type">Integer</span> <span class="type">integer</span>) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("接收-----&gt;" + <span class="type">integer</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="built_in">public</span> <span class="type">void</span> onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="built_in">public</span> <span class="type">void</span> onComplete() &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("onComplete");</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> testDefer() &#123;</span><br><span class="line">    Observable&lt;<span class="type">Integer</span>&gt; source = Observable</span><br><span class="line">            .defer(<span class="built_in">new</span> Callable&lt;ObservableSource&lt;? extends <span class="type">Integer</span>&gt;&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="built_in">public</span> ObservableSource&lt;? extends <span class="type">Integer</span>&gt; <span class="keyword">call</span>() throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> getSource();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    source</span><br><span class="line">            .subscribeOn(Schedulers.io())</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .subscribe(getObserver());</span><br><span class="line"></span><br><span class="line">    source</span><br><span class="line">            .subscribeOn(Schedulers.io())</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .subscribe(getObserver());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: onSubscribe   //先订阅</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: onSubscribe</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: 发射<span class="comment">-----&gt;RxCachedThreadScheduler-1--:1  //再发射数据</span></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: 发射<span class="comment">-----&gt;RxCachedThreadScheduler-2--:1</span></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: 接收<span class="comment">-----&gt;1</span></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: onComplete</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: 接收<span class="comment">-----&gt;1</span></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: onComplete</span><br></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>根据日志可以看出，直到有观察者订阅时才创建 Observable ，并且为每个观察者创建一个新的 Observable 。</p><p>Defer操作符会一直等待直到有观察者订阅它，然后它使用Observable工厂方法生成一个Observable。它对每个观察者都这样做，因此尽管每个订阅者都以为自己订阅的是同一个Observable，事实上每个订阅者获取的是它们自己的单独的数据序列。</p><p>我们点进去看下 defer ， 其实也返回了一个 Observable 子类的对象 ObservableDefer</p><p>那么接下来我们之间看 subscribeActual 方法的实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void subscribe<span class="constructor">Actual(Observer&lt;? <span class="params">super</span> T&gt; <span class="params">observer</span>)</span> &#123;</span><br><span class="line">    ObservableSource&lt;? extends T&gt; pub;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//返回我们通过 getSourse() 创建的 被观察者，</span></span><br><span class="line">        pub = <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">supplier</span>.<span class="params">call</span>()</span>, <span class="string">"null ObservableSource supplied"</span>);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">t</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">EmptyDisposable</span>.</span></span>error(t, observer);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pub.subscribe(observer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们每次执行 source.subscribe(getObserver()) ;就会调用一次 subscribeActual方法，也就会通过 upplier.call() 返回我们新创建的被观察者，也就验证了 “直到有观察者订阅时才创建 Observable ，并且为每个观察者创建一个新的 Observable”。</p><p>我们再看下 pub.subscribe(observer); 这一行代码，pub 就是我们 getSourse() 时通过 create 创建的  Observable，这里的 pub.subscribe() 其实是执行了 ObservableCreate 的 subscribeActual 方法，接下来的流程就和 <a href="https://juejin.im/post/5d5faa8af265da03f12e632e" target="_blank" rel="noopener">create 的订阅过程 </a> 一样了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;defer示例和详细解析&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RxJava2" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/RxJava2/"/>
    
    
      <category term="Rxjava" scheme="http://www.wblog.work/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 - buffer示例和源码解析</title>
    <link href="http://www.wblog.work/Rxjava2-buffer%E7%A4%BA%E4%BE%8B%E5%92%8C%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.wblog.work/Rxjava2-buffer示例和源码解析/</id>
    <published>2019-10-08T05:21:27.000Z</published>
    <updated>2019-10-09T03:12:26.591Z</updated>
    
    <content type="html"><![CDATA[<p>buffer示例和源码解析</p><a id="more"></a><h4 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h4><p>收集Observable的数据放进一个数据包裹，然后发射这些数据包裹，而不是一次发射一个值。</p><p>Buffer 操作符将一个 Observable 变换为另一个，原来的 Observable 正常发射数据，变换产生的 Observable 发射这些数据的缓存集合。</p><p>注意：如果原来的Observable发射了一个onError通知，Buffer会立即传递这个通知，而不是首先发射缓存的数据，即使在这之前缓存中包含了原始Observable发射的数据。</p><h5 id="buffer-count-skip"><a href="#buffer-count-skip" class="headerlink" title="buffer(count, skip)"></a>buffer(count, skip)</h5><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="type">Integer</span>&gt; integers = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    integers.<span class="keyword">add</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">Observable&lt;<span class="type">Integer</span>&gt; observable = Observable.fromIterable(integers);</span><br><span class="line"></span><br><span class="line">observable</span><br><span class="line">        .buffer(<span class="number">5</span>，<span class="number">4</span>)</span><br><span class="line">        .subscribe(<span class="built_in">new</span> Consumer&lt;List&lt;<span class="type">Integer</span>&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> accept(List&lt;<span class="type">Integer</span>&gt; integers) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("接收-----&gt;" + integers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">System.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">System.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">System.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]</span><br><span class="line">System.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p>每个缓存里面包含 count 个元素，我们这里把数据列表 假设为List，索引为index。那么下一个缓存是以 index % skip == 0 开始，取 count 个元素。 我们从上面的打印日志中就可以看出，每个缓存的 开始元素索引和skip取余都为0。我们也可以通俗的理解为 先取 count 个元素，然后每隔 skip 个再取 count 个。</p><p>我们把skip为6看下输出结果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0 % 6==0</span></span><br><span class="line">ystem.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">// 6 % 6==0</span></span><br><span class="line">System.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="comment">// 12 % 6==0</span></span><br><span class="line">System.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]</span><br><span class="line"><span class="comment">// 18 % 6==0</span></span><br><span class="line">System.<span class="keyword">out</span>: 接收-----&gt;[<span class="number">18</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p>我们看下源码：</p><p>先从 buffer(count) 点进去，他调用的是 buffer(count, skip)， 只是参数skip 也是count，  而 buffer(count, skip) 调用的是 buffer(count, skip，bufferSupplier)，那么我们看下 buffer(count, skip，bufferSupplier)：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public final &lt;U extends Collection&lt;? super T&gt;&gt; Observable&lt;U&gt; buffer(<span class="built_in">int</span> count, <span class="built_in">int</span> skip, Callable&lt;U&gt; bufferSupplier) &#123;</span><br><span class="line">    <span class="comment">// count 必须大于0</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>verify<span class="constructor">Positive(<span class="params">count</span>, <span class="string">"count"</span>)</span>;</span><br><span class="line">    <span class="comment">// skip 必须大于0</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>verify<span class="constructor">Positive(<span class="params">skip</span>, <span class="string">"skip"</span>)</span>;</span><br><span class="line">    <span class="comment">//bufferSupplier 不能为null</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">bufferSupplier</span>, <span class="string">"bufferSupplier is null"</span>)</span>;</span><br><span class="line">    <span class="comment">//装配 ObservableBuffer 对象返回</span></span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Assembly(<span class="params">new</span> ObservableBuffer&lt;T, U&gt;(<span class="params">this</span>, <span class="params">count</span>, <span class="params">skip</span>, <span class="params">bufferSupplier</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，订阅的时候调用的 subscribe 方法，而 subscribe 调用是Observable的子类的 subscribeActual 方法，而这里Observable的子类就是 ObservableBuffer。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> subscribeActual(Observer&lt;? <span class="keyword">super</span> U&gt; t) &#123;</span><br><span class="line">    <span class="comment">//第一种情况： 当skip 和 count相等，或者 buffer(count)时会走这里</span></span><br><span class="line">    <span class="keyword">if</span> (skip == <span class="keyword">count</span>) &#123;</span><br><span class="line">        BufferExactObserver&lt;T, U&gt; bes = <span class="keyword">new</span> BufferExactObserver&lt;T, U&gt;(t, <span class="keyword">count</span>, bufferSupplier);</span><br><span class="line">        <span class="keyword">if</span> (bes.createBuffer()) &#123;</span><br><span class="line">            <span class="keyword">source</span>.subscribe(bes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//第二种情况： 当skip 和 count不相等时</span></span><br><span class="line">        <span class="keyword">source</span>.subscribe(<span class="keyword">new</span> BufferSkipObserver&lt;T, U&gt;(t, <span class="keyword">count</span>, skip, bufferSupplier));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们分两种情况看：</p><p>首先第一种：</p><p>创建了一个 BufferExactObserver 对象，然后执行 bes.createBuffer() ：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">boolean create<span class="constructor">Buffer()</span> &#123;</span><br><span class="line">    <span class="comment">//这里的 U 的类型是 List&lt;Integer&gt;</span></span><br><span class="line">    U b;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个空的 ArrayList，bufferSupplier是ArrayListSupplier的对象，</span></span><br><span class="line"><span class="comment">//他的call执行了 return new ArrayList&lt;Object&gt;();</span></span><br><span class="line">        b = <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">bufferSupplier</span>.<span class="params">call</span>()</span>, <span class="string">"Empty buffer supplied"</span>);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">t</span>)</span>;</span><br><span class="line">        buffer = null;</span><br><span class="line">        <span class="keyword">if</span> (upstream<span class="operator"> == </span>null) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">EmptyDisposable</span>.</span></span>error(t, downstream);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            upstream.dispose<span class="literal">()</span>;</span><br><span class="line">            downstream.on<span class="constructor">Error(<span class="params">t</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        return <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把空的ArrayList赋给 buffer，buffer是一个List&lt;Integer&gt;类型的变量</span></span><br><span class="line">    buffer = b;</span><br><span class="line">    return <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到这里没有异常的话都返回true，所以一般都会执行 source.subscribe(bes)，这里的source其实是我们示例里Observable.fromIterable(integers) 返回的 ObservableFromIterable对象，<a href="https://juejin.im/post/5d63492351882554a13f8e5e" target="_blank" rel="noopener">fromIterable</a> 我们已经分析过。</p><p>我们知道 fromIterable 是遍历 Iterable，而每遍历一项数据都会执行 BufferExactObserver 的 onNext，所以我们直接看下onNext的代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fromIterable 遍历 Iterable，执行onNext</span></span><br><span class="line"><span class="comment"> * @param t 每遍历一项数据 发射的Item</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> onNext(T t) &#123;</span><br><span class="line">    <span class="comment">//buffer 上面创建的空的 ArrayList</span></span><br><span class="line">    U b = buffer;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// t 是fromIterable中返回的每一条item数据</span></span><br><span class="line">        b.add(t);</span><br><span class="line">        <span class="comment">// size 记录存入缓存区的元素个数，当元素个数&gt;=我们传进去的大小时，就发射一个count大小的缓冲区</span></span><br><span class="line">        <span class="comment">//发射完后，元素个数赋值为0，重新创建一个新的缓存区覆盖原来的缓存区</span></span><br><span class="line">        <span class="keyword">if</span> (++<span class="keyword">size</span> &gt;= <span class="keyword">count</span>) &#123;</span><br><span class="line">            <span class="comment">//发射一个count大小的缓冲区</span></span><br><span class="line">            downstream.onNext(b);</span><br><span class="line">            <span class="keyword">size</span> = <span class="number">0</span>;</span><br><span class="line">            createBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到onNext 发射的都是count大小的缓冲，但是假如我们传的数据不是count倍数时，比如24条数据，缓存大小为5，其中20条分四个缓存发射了，那剩下的4就不会发射了吗？</p><p>我们从onNext中看到，不管有没有count个元素，都会放到缓存 b 中，而剩下4条会在onComplete()中发射</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、缓存中还有元素，发射剩下的元素，执行onComplete</span></span><br><span class="line"><span class="comment"> * 2、缓存中没有元素，直接执行onComplete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    U b = buffer;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">        buffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 这时的缓存区的元素就是剩下的4条元素（假如数据总数不是count的倍数）</span></span><br><span class="line">        <span class="keyword">if</span> (!b.isEmpty()) &#123;</span><br><span class="line">            downstream.onNext(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//发送完成后执行 onComplete</span></span><br><span class="line">        downstream.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是buffer(count)的整个流程。</p><p>第二种情况 （buffer(count, skip)）：</p><p>从 subscribeActual 方法中我们看到第二种情况直接执行了下面代码：</p><p><code>source.subscribe(new BufferSkipObserver&lt;T, U&gt;(t, count, skip, bufferSupplier));</code></p><p>同样 subscribe 也是走了 <a href="https://juejin.im/post/5d63492351882554a13f8e5e" target="_blank" rel="noopener">fromIterable</a> 的流程，和上面的一样。</p><p>我们直接看 BufferSkipObserver 的 onNext方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fromIterable 遍历 Iterable，执行onNext</span></span><br><span class="line"><span class="comment"> * @param t 每遍历一项数据 发射的Item</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public void on<span class="constructor">Next(T <span class="params">t</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// index是遍历 Iterable的索引，判断index+1后和skip取余是否等于0</span></span><br><span class="line">    <span class="comment">//假如取余等于0，重新创建一个缓存</span></span><br><span class="line">    <span class="keyword">if</span> (index++ % skip<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//U 是 List&lt;Integer&gt;类型的</span></span><br><span class="line">        U b;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建一个空的 ArrayList</span></span><br><span class="line">            b = <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">bufferSupplier</span>.<span class="params">call</span>()</span>, <span class="string">"The bufferSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources."</span>);</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            buffers.clear<span class="literal">()</span>;</span><br><span class="line">            upstream.dispose<span class="literal">()</span>;</span><br><span class="line">            downstream.on<span class="constructor">Error(<span class="params">e</span>)</span>;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//buffers 是ArrayDeque类型的对象，把空的ArrayList存入到 buffers中，当做一个缓存区</span></span><br><span class="line">        <span class="comment">//当count &gt; slip时，buffers中可能同时会有多个缓存区，这个时候缓存会有重叠的元素</span></span><br><span class="line">        <span class="comment">//当count &lt; slip时，buffers在某些情况下没有缓存区，这个时候会有间隙，也就是说部分数据会丢失</span></span><br><span class="line">        buffers.offer(b);</span><br><span class="line">    &#125;</span><br><span class="line">    Iterator&lt;U&gt; it = buffers.iterator<span class="literal">()</span>;</span><br><span class="line">    <span class="comment">//遍历buffers</span></span><br><span class="line">    <span class="keyword">while</span> (it.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">        <span class="comment">//获取 buffers 中每一个缓存ArrayList，把当前发射的Item存到缓存区</span></span><br><span class="line">        U b = it.next<span class="literal">()</span>;</span><br><span class="line">        b.add(t);</span><br><span class="line">        <span class="comment">//判断当前缓存区是否已满</span></span><br><span class="line">        <span class="keyword">if</span> (count &lt;= b.size<span class="literal">()</span>) &#123;</span><br><span class="line">            <span class="comment">//如果已满，则发射当前缓存区数据，删除当前缓存区</span></span><br><span class="line">            it.remove<span class="literal">()</span>;</span><br><span class="line">            downstream.on<span class="constructor">Next(<span class="params">b</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的当最后数据不足一个缓存的大小时，会执行onComplete方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void on<span class="constructor">Complete()</span> &#123;</span><br><span class="line">    <span class="comment">//判断buffers是否存在缓存</span></span><br><span class="line">    <span class="keyword">while</span> (!buffers.is<span class="constructor">Empty()</span>) &#123;</span><br><span class="line">        <span class="comment">//假如有 直接发射缓存区中的所有元素</span></span><br><span class="line">        downstream.on<span class="constructor">Next(<span class="params">buffers</span>.<span class="params">poll</span>()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行onComplete 回调</span></span><br><span class="line">    downstream.on<span class="constructor">Complete()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="buffer-timespan-unit"><a href="#buffer-timespan-unit" class="headerlink" title="buffer(timespan,  unit)"></a>buffer(timespan,  unit)</h5><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><p>示例1</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Observable</span></span><br><span class="line">        <span class="comment">//表示发射10条整数序列，每间隔 100ms发射一条</span></span><br><span class="line">        <span class="selector-class">.interval</span>(<span class="number">100</span>, TimeUnit.MILLISECONDS)<span class="selector-class">.take</span>(<span class="number">10</span>)</span><br><span class="line">        <span class="selector-class">.buffer</span>(<span class="number">300</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        <span class="selector-class">.subscribe</span>(new Observer&lt;List&lt;Long&gt;&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">"onSubscribe"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @<span class="selector-tag">Override</span></span><br><span class="line">            <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">onNext</span>(List&lt;Long&gt; longs) &#123;</span><br><span class="line">                <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(longs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @<span class="selector-tag">Override</span></span><br><span class="line">            <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">onError</span>(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">                <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">32.359</span> <span class="number">8656</span><span class="number">-8656</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onSubscribe</span><br><span class="line"><span class="number">08</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">32.661</span> <span class="number">8656</span><span class="number">-8729</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">08</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">32.960</span> <span class="number">8656</span><span class="number">-8729</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="number">08</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">33.261</span> <span class="number">8656</span><span class="number">-8729</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">//中间隔了200ms</span></span><br><span class="line"><span class="number">08</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">33.361</span> <span class="number">8656</span><span class="number">-8730</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: [<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="number">08</span><span class="number">-29</span> <span class="number">14</span>:<span class="number">34</span>:<span class="number">33.361</span> <span class="number">8656</span><span class="number">-8730</span>/com.zwb.rxjavademo I/System.<span class="keyword">out</span>: onComplete</span><br></pre></td></tr></table></figure><p><strong>打印日志的第四行和第五行才隔了200ms，而不是我们设置的300ms，这个我们下面会分析</strong></p><h6 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h6><p>我们看下源码：<br>从 buffer 点击去，最后执行的是</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public final &lt;U extends Collection&lt;? super T&gt;&gt; Observable&lt;U&gt; buffer(</span><br><span class="line">        long timespan, TimeUnit <span class="built_in">unit</span>,</span><br><span class="line">        Scheduler scheduler, <span class="built_in">int</span> count,</span><br><span class="line">        Callable&lt;U&gt; bufferSupplier,</span><br><span class="line">        boolean restartTimerOnMaxSize) &#123;</span><br><span class="line">    <span class="comment">//判断数据的合法性</span></span><br><span class="line">    <span class="comment">//。。。。。。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//装配 ObservableBufferTimed 对象返回</span></span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Assembly(<span class="params">new</span> ObservableBufferTimed&lt;T, U&gt;(<span class="params">this</span>, <span class="params">timespan</span>, <span class="params">timespan</span>, <span class="params">unit</span>, <span class="params">scheduler</span>, <span class="params">bufferSupplier</span>, <span class="params">count</span>, <span class="params">restartTimerOnMaxSize</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道真正订阅是在ObservableBufferTimed类的subscribeActual方法中，我们看下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">protected void subscribeActual(Observer&lt;? <span class="keyword">super</span> U&gt; t) &#123;</span><br><span class="line">    <span class="comment">//第一种情况，buffer(timespan,  unit) 会走这里，也就是示例1</span></span><br><span class="line">    <span class="keyword">if</span> (timespan == timeskip &amp;&amp; maxSize == Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//我们暂且把这行称为 【代码1】</span></span><br><span class="line">        source.subscribe(<span class="keyword">new</span> <span class="type">BufferExactUnboundedObserver</span>&lt;T, U&gt;(</span><br><span class="line">                <span class="keyword">new</span> <span class="type">SerializedObserver</span>&lt;U&gt;(t),</span><br><span class="line">                bufferSupplier, timespan, unit, scheduler));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种情况</span></span><br><span class="line">    Scheduler.Worker w = scheduler.createWorker();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timespan == timeskip) &#123;</span><br><span class="line">        source.subscribe(<span class="keyword">new</span> <span class="type">BufferExactBoundedObserver</span>&lt;T, U&gt;(</span><br><span class="line">                <span class="keyword">new</span> <span class="type">SerializedObserver</span>&lt;U&gt;(t),</span><br><span class="line">                bufferSupplier,</span><br><span class="line">                timespan, unit, maxSize, restartTimerOnMaxSize, w</span><br><span class="line">        ));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三种情况</span></span><br><span class="line">    source.subscribe(<span class="keyword">new</span> <span class="type">BufferSkipBoundedObserver</span>&lt;T, U&gt;(</span><br><span class="line">            <span class="keyword">new</span> <span class="type">SerializedObserver</span>&lt;U&gt;(t),</span><br><span class="line">            bufferSupplier, timespan, timeskip, unit, w));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里只分析第一种情况：</p><p>【代码1】就一行代码，但是这行代码其实很复杂的。</p><p>source(被观察者) 是执行 interval 时创建的 ObservableInterval 对象 ，而执行 subscribe 时会执行 ObservableInterval 的 subscribeActual，而 ObservableInterval 的 subscribeActual 默认会在computation线程每隔 100ms（示例1中设置的） 发送一条整数序列，也就是执行一次 onNext （注意：这里的onNext不会走 我们的示例的中onNext）。</p><p>下面是 ObservableInterval 的部分代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void subscribe<span class="constructor">Actual(Observer&lt;? <span class="params">super</span> Long&gt; <span class="params">observer</span>)</span> &#123;</span><br><span class="line">    IntervalObserver is = <span class="keyword">new</span> <span class="constructor">IntervalObserver(<span class="params">observer</span>)</span>;</span><br><span class="line">    <span class="comment">//这行先标记下 标记1</span></span><br><span class="line">    observer.on<span class="constructor">Subscribe(<span class="params">is</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Scheduler sch = scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sch instanceof TrampolineScheduler) &#123;</span><br><span class="line">        Worker worker = sch.create<span class="constructor">Worker()</span>;</span><br><span class="line">        is.set<span class="constructor">Resource(<span class="params">worker</span>)</span>;</span><br><span class="line">        worker.schedule<span class="constructor">Periodically(<span class="params">is</span>, <span class="params">initialDelay</span>, <span class="params">period</span>, <span class="params">unit</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Disposable d = sch.schedule<span class="constructor">PeriodicallyDirect(<span class="params">is</span>, <span class="params">initialDelay</span>, <span class="params">period</span>, <span class="params">unit</span>)</span>;</span><br><span class="line">        is.set<span class="constructor">Resource(<span class="params">d</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void run<span class="literal">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (get<span class="literal">()</span> != DisposableHelper.DISPOSED) &#123;</span><br><span class="line"><span class="comment">//标记2</span></span><br><span class="line">        downstream.on<span class="constructor">Next(<span class="params">count</span><span class="operator">++</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interval参考 <a href="https://juejin.im/post/5d63ab8af265da03b46bfb4e" target="_blank" rel="noopener">interval 示例和详细解析</a></p><p>我们从这里没看到什么时候执行onComplete的方法，也就说明了Interval是无限发射数据的，但是我们上面的日志打印了onComplete方法，其实是take中 执行了onComplete方法。</p><p>我们回过头再看<strong>【代码1】</strong>里面创建了两个类：BufferExactUnboundedObserver 和 SerializedObserver，这两个类把我们自己创建的观察者 Observer 又包装了两次。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source.subscribe(<span class="keyword">new</span> <span class="type">BufferExactUnboundedObserver</span>&lt;T, U&gt;(</span><br><span class="line">                <span class="keyword">new</span> <span class="type">SerializedObserver</span>&lt;U&gt;(t),</span><br><span class="line">                bufferSupplier, timespan, unit, scheduler));</span><br></pre></td></tr></table></figure><p>但是在传到 ObservableInterval 的 subscribeActual方法中的是 BufferExactUnboundedObserver的对象，所以上面的 <strong>标记1</strong>（onSubscribe）和 <strong>标记2</strong>（onNext）会执行 BufferExactUnboundedObserver 的 onSubscribe和onNext方法。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void on<span class="constructor">Subscribe(Disposable <span class="params">d</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">DisposableHelper</span>.</span></span>validate(this.upstream, d)) &#123;</span><br><span class="line">        this.upstream = d;</span><br><span class="line">        <span class="comment">//同样的U 是 List&lt;Integer&gt;类型的</span></span><br><span class="line">        U b;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建一个空的 ArrayList</span></span><br><span class="line">            b = <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">bufferSupplier</span>.<span class="params">call</span>()</span>, <span class="string">"The buffer supplied is null"</span>);</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">e</span>)</span>;</span><br><span class="line">            dispose<span class="literal">()</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">EmptyDisposable</span>.</span></span>error(e, downstream);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把空的ArrayList赋给 buffer，buffer是一个List&lt;Integer&gt;类型的变量</span></span><br><span class="line">        buffer = b;</span><br><span class="line">        <span class="comment">// downstream 是SerializedObserver的对象，执行他的onSubscribe</span></span><br><span class="line"><span class="comment">// 标记3</span></span><br><span class="line">        downstream.on<span class="constructor">Subscribe(<span class="params">this</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!cancelled) &#123;</span><br><span class="line">            <span class="comment">// 这个地方很重要，里面也比较复杂，涉及到 scheduler 的知识点</span></span><br><span class="line">            <span class="comment">// 简单点理解，就是执行一个定时任务，最后回调是 run 方法中</span></span><br><span class="line">            Disposable task = scheduler.schedule<span class="constructor">PeriodicallyDirect(<span class="params">this</span>, <span class="params">timespan</span>, <span class="params">timespan</span>, <span class="params">unit</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (!timer.compare<span class="constructor">AndSet(<span class="params">null</span>, <span class="params">task</span>)</span>) &#123;</span><br><span class="line">                task.dispose<span class="literal">()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里是把interval 每发射的数据存到 buffer里面</span></span><br><span class="line"><span class="comment"> * @param t t在这里是 interval 每隔100ms 发射的整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Override</span><br><span class="line">public void on<span class="constructor">Next(T <span class="params">t</span>)</span> &#123;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        U b = buffer;</span><br><span class="line">        <span class="keyword">if</span> (b<span class="operator"> == </span>null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        b.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scheduler参考 <a href="https://github.com/gs-wenbing/RxJavaDemo/tree/master/app/src/main/java/com/zwb/rxjavademo/RxAPI/RxScheduler" target="_blank" rel="noopener">scheduler的详细解析</a></p><p>我们看到在 onSubscribe 中执行一个定时任务，最后回调是 run 方法中:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 存放下一个时间段的数据</span></span><br><span class="line">    U next;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        next = ObjectHelper.requireNonNull(bufferSupplier.call(), <span class="string">"The bufferSupplier returned a null buffer"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        Exceptions.throwIfFatal(e);</span><br><span class="line">        downstream.onError(e);</span><br><span class="line">        dispose();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存放当前数据，，</span></span><br><span class="line">    U current;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//把buffer中的数据存进去</span></span><br><span class="line">        current = buffer;</span><br><span class="line">        <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//然后buffer存放下个时间段的数据</span></span><br><span class="line">            buffer = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">        DisposableHelper.dispose(timer);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行父类的 fastPathEmit，里面执行了accept，也就是下面的方法</span></span><br><span class="line">    fastPathEmit(current, <span class="keyword">false</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v 就是上面的 current，也就是要发射的一个缓存区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Observer&lt;? <span class="keyword">super</span> U&gt; a, U v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//downstream 是SerializedObserver的对象，执行他的onNext</span></span><br><span class="line">    <span class="comment">//标记4</span></span><br><span class="line">    downstream.onNext(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从上面代码中看到，<strong>标注3 *<em>和 *</em>标注4</strong> 的 onSubscribe 和 onNext 方法是 SerializedObserver中的，</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> void onSubscribe(<span class="meta">@NonNull</span> Disposable d) &#123;</span><br><span class="line">    <span class="keyword">if</span> (DisposableHelper.validate(<span class="keyword">this</span>.upstream, d)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.upstream = d;</span><br><span class="line">        <span class="comment">// 这里才执行了 我们自己创建的 Observer 的 onSubscribe 回调</span></span><br><span class="line">        downstream.onSubscribe(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t 这里的 t 是上面创建的一组数据缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> void onNext(<span class="meta">@NonNull</span> T t) &#123;</span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">    <span class="comment">//我们只看这行代码，发射数据缓存</span></span><br><span class="line">    downstream.onNext(t);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到最后给我们自己创建的观察者发射数据是在 SerializedObserver 中，包括onSubscribe、onComplete的回调</p><p>但是整个流程还没完，我们打印的日志里 第四条和第五条的时间间隔不是我们设置的300ms，这是怎么回事呢</p><p>我们知道其实上面的代码中我们看到了两个线程在执行，一个是interval的线程隔100ms发射数据给buffer，另个一是buffer的线程每个300ms发射数据缓存 ，但是这俩个线程是异步的，<br>也就是说<code>interval(100, TimeUnit.MILLISECONDS).take(10)</code>发射的10条数据完成后会直接执行onComplete()，而onComplete()把剩下的数据缓存全部发射，并且onComplete()也不需要等待300ms后在执行。</p><p>这里take的onComplete()最终会调用 BufferExactUnboundedObserver 的 onComplete方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void on<span class="constructor">Complete()</span> &#123;</span><br><span class="line">    U b;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        b = buffer;</span><br><span class="line">        <span class="comment">//清空 buffer</span></span><br><span class="line">        buffer = null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b != null) &#123;</span><br><span class="line">        queue.offer(b);</span><br><span class="line">        <span class="comment">// done设置为true后执行downstream（SerializedObserver） 的onComplete方法，</span></span><br><span class="line">        <span class="comment">// 因为SerializedObserver的onComplete方法才是正在执行我们创建的观察者的onComplete的方法</span></span><br><span class="line">        <span class="keyword">done</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (enter<span class="literal">()</span>) &#123;</span><br><span class="line">            <span class="comment">//1、执行BufferExactUnboundedObserver 的 accept</span></span><br><span class="line">            <span class="comment">//2、执行SerializedObserver的onComplete</span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">QueueDrainHelper</span>.</span></span>drain<span class="constructor">Loop(<span class="params">queue</span>, <span class="params">downstream</span>, <span class="params">false</span>, <span class="params">null</span>, <span class="params">this</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结束buffer的定时任务</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">DisposableHelper</span>.</span></span>dispose(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样buffer(timespan, unit) 的整个流程就分析完了。上面示例分析加了interval 和 take ，所以会有些复杂。<br>下面看下简单的示例</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">        .<span class="keyword">create</span>(<span class="built_in">new</span> ObservableOnSubscribe&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> subscribe(ObservableEmitter&lt;<span class="type">Integer</span>&gt; emitter) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                    emitter.onNext(i);</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .buffer(<span class="number">300</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        .subscribe(<span class="built_in">new</span> Observer&lt;List&lt;<span class="type">Integer</span>&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> onSubscribe(Disposable d) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("onSubscribe");</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> onNext(List&lt;<span class="type">Integer</span>&gt; longs) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(longs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> onComplete() &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("onComplete");</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I/System.<span class="keyword">out</span>: onSubscribe</span><br><span class="line">I/System.<span class="keyword">out</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">I/System.<span class="keyword">out</span>: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">I/System.<span class="keyword">out</span>: [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">I/System.<span class="keyword">out</span>: [<span class="number">9</span>]</span><br><span class="line">I/System.<span class="keyword">out</span>: onComplete</span><br></pre></td></tr></table></figure><p>时序图如下：</p><img src="https://raw.githubusercontent.com/gs-wenbing/RxJavaDemo/master/app/images/buffer.png" width="1000" alt="时序图">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;buffer示例和源码解析&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RxJava2" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/RxJava2/"/>
    
    
      <category term="Rxjava" scheme="http://www.wblog.work/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 - from示例和源码解析</title>
    <link href="http://www.wblog.work/Rxjava2-from%E7%A4%BA%E4%BE%8B%E5%92%8C%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.wblog.work/Rxjava2-from示例和源码解析/</id>
    <published>2019-10-08T05:21:27.000Z</published>
    <updated>2019-10-09T03:11:50.304Z</updated>
    
    <content type="html"><![CDATA[<p>from示例和源码解析</p><a id="more"></a><h4 id="fromIterable-："><a href="#fromIterable-：" class="headerlink" title="fromIterable()："></a>fromIterable()：</h4><p>遍历 Iterable，和 just() 方式一样直接触发 onNext()，然后返回每项数据</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="type">Integer</span>&gt; list = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.<span class="keyword">add</span>(<span class="number">0</span>);</span><br><span class="line">list.<span class="keyword">add</span>(<span class="number">1</span>);</span><br><span class="line">list.<span class="keyword">add</span>(<span class="number">2</span>);</span><br><span class="line">list.<span class="keyword">add</span>(<span class="number">3</span>);</span><br><span class="line">mDisposables.<span class="keyword">add</span>(Observable</span><br><span class="line">        .fromIterable(list)</span><br><span class="line">        .subscribe(<span class="built_in">new</span> Consumer&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> accept(<span class="type">Integer</span> <span class="type">integer</span>) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("接收-----&gt;"+<span class="type">integer</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接收<span class="comment">-----&gt;0</span></span><br><span class="line">接收<span class="comment">-----&gt;1</span></span><br><span class="line">接收<span class="comment">-----&gt;2</span></span><br><span class="line">接收<span class="comment">-----&gt;3</span></span><br></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>我们通过源码可以看到 fromIterable 通过 Iterable 构造了一个 ObservableFromIterable 然后返回。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Observable&lt;T&gt; from<span class="constructor">Iterable(Iterable&lt;? <span class="params">extends</span> T&gt; <span class="params">source</span>)</span> &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">source</span>, <span class="string">"source is null"</span>)</span>;</span><br><span class="line"><span class="comment">// 通过 Iterable 构造了一个 ObservableFromIterable 返回</span></span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Assembly(<span class="params">new</span> ObservableFromIterable&lt;T&gt;(<span class="params">source</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObservableFromIterable 继承 Observable。</p><p>接下来我们回到订阅过程，其订阅过程前面的内容跟上一节分析的是一样的，就不重复了。还记得订阅过程中 Observable 类的 subscribeActual() 是个抽象方法吗？他的真正实现是在 ObservableFromIterable 中，所以我们来看下 subscribeActual 方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableFromIterable&lt;T&gt;</span> <span class="keyword">extends</span> <span class="title">Observable&lt;T&gt;</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Iterable</span>&lt;? <span class="keyword">extends</span> <span class="type">T</span>&gt; source;</span><br><span class="line">    public <span class="type">ObservableFromIterable</span>(<span class="type">Iterable</span>&lt;? <span class="keyword">extends</span> <span class="type">T</span>&gt; source) &#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void subscribeActual(<span class="type">Observer</span>&lt;? <span class="keyword">super</span> <span class="type">T</span>&gt; observer) &#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"><span class="comment">// 把我们创建的 Observer 和 传的 Iterable 包装成 FromIterableDisposable</span></span><br><span class="line">        <span class="type">FromIterableDisposable</span>&lt;<span class="type">T</span>&gt; d = <span class="keyword">new</span> <span class="type">FromIterableDisposable</span>&lt;<span class="type">T</span>&gt;(observer, it);</span><br><span class="line">        observer.onSubscribe(d);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!d.fusionMode) &#123;</span><br><span class="line">            d.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line"><span class="comment">//内部静态类 FromIterableDisposable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样也将我们自定义的 Observer 给包装成了一个新的 FromIterableDisposable 对象，然后调用 observer.onSubscribe(d) 设置了观察者的onSubscribe方法的回调。所以观察者onSubscribe()是在订阅时被调用，也就是在事件执行之前调用。最后执行 d.run()。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">static final <span class="keyword">class</span> FromIterableDisposable&lt;T&gt; extends BasicQueueDisposable&lt;T&gt; &#123;</span><br><span class="line"><span class="comment">//我们创建的 观察者 Observer</span></span><br><span class="line">    final Observer&lt;? super T&gt; downstream;</span><br><span class="line"><span class="comment">//我们传的参数 Iterator</span></span><br><span class="line">    final Iterator&lt;? extends T&gt; it;</span><br><span class="line"></span><br><span class="line">    volatile boolean disposed;</span><br><span class="line"></span><br><span class="line">    boolean fusionMode;</span><br><span class="line"></span><br><span class="line">    boolean <span class="keyword">done</span>;</span><br><span class="line"></span><br><span class="line">    boolean checkNext;</span><br><span class="line"></span><br><span class="line">    <span class="constructor">FromIterableDisposable(Observer&lt;? <span class="params">super</span> T&gt; <span class="params">actual</span>, Iterator&lt;? <span class="params">extends</span> T&gt; <span class="params">it</span>)</span> &#123;</span><br><span class="line">        this.downstream = actual;</span><br><span class="line">        this.it = it;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void run<span class="literal">()</span> &#123;</span><br><span class="line">        boolean hasNext;</span><br><span class="line"><span class="comment">//循环 Iterator</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">// 消息断开后直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (is<span class="constructor">Disposed()</span>) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            T v;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                v = <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">it</span>.<span class="params">next</span>()</span>, <span class="string">"The iterator returned a null value"</span>);</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">e</span>)</span>;</span><br><span class="line">                downstream.on<span class="constructor">Error(<span class="params">e</span>)</span>;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 执行 观察者 Observer 的回调 onNext()</span></span><br><span class="line">            downstream.on<span class="constructor">Next(<span class="params">v</span>)</span>;</span><br><span class="line"><span class="comment">// 消息断开后直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (is<span class="constructor">Disposed()</span>) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hasNext = it.has<span class="constructor">Next()</span>;</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">e</span>)</span>;</span><br><span class="line">                downstream.on<span class="constructor">Error(<span class="params">e</span>)</span>;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (hasNext);</span><br><span class="line"><span class="comment">// 循环结束执行onComplete() (循环结束isDisposed()都是false，否则在循环中就已经返回了)</span></span><br><span class="line">        <span class="keyword">if</span> (!is<span class="constructor">Disposed()</span>) &#123;</span><br><span class="line">            downstream.on<span class="constructor">Complete()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fromArray-："><a href="#fromArray-：" class="headerlink" title="fromArray()："></a>fromArray()：</h4><p>遍历 数组，和 just() 方式一样直接触发 onNext()，然后返回每项数据<br><br>fromArray和多参数just一样，只不过 fromArray 可以传入多于10个的变量，并可传入一个数组</p><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><p>示例1</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mDisposables.<span class="keyword">add</span>(Observable</span><br><span class="line">        //把 <span class="type">int</span> 装箱成 <span class="type">Integer</span>，所以返回的每个item</span><br><span class="line">        .fromArray(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">        .subscribe(<span class="built_in">new</span> Consumer&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> accept(<span class="type">Integer</span> <span class="type">integer</span>) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("接收-----&gt;"+<span class="type">integer</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接收<span class="comment">-----&gt;0</span></span><br><span class="line">接收<span class="comment">-----&gt;1</span></span><br><span class="line">接收<span class="comment">-----&gt;2</span></span><br><span class="line">接收<span class="comment">-----&gt;3</span></span><br></pre></td></tr></table></figure><p>示例2</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span>[] <span class="keyword">array</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">mDisposables.<span class="keyword">add</span>(Observable</span><br><span class="line">        // 可传入一个数组</span><br><span class="line">        .fromArray(<span class="keyword">array</span>)</span><br><span class="line">        .subscribe(<span class="built_in">new</span> Consumer&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> accept(<span class="type">Integer</span> <span class="type">integer</span>) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("接收-----&gt;"+<span class="type">integer</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接收<span class="comment">-----&gt;0</span></span><br><span class="line">接收<span class="comment">-----&gt;1</span></span><br><span class="line">接收<span class="comment">-----&gt;2</span></span><br><span class="line">接收<span class="comment">-----&gt;3</span></span><br></pre></td></tr></table></figure><p>示例3</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数 int 类型 把整个array作为可变数据组的一个item，所以返回的是数组类型</span></span><br><span class="line"><span class="built_in">int</span>[] <span class="built_in">array</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">mDisposables.add(Observable</span><br><span class="line">        <span class="comment">// 可传入一个数组</span></span><br><span class="line">        .fromArray(<span class="built_in">array</span>)</span><br><span class="line">        .subscribe(new Consumer&lt;<span class="built_in">int</span>[]&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> accept(<span class="built_in">int</span>[] <span class="built_in">int</span>s) throws Exception &#123;</span><br><span class="line">                <span class="comment">//接收到的是数组的地址</span></span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"接收-----&gt;"</span>+<span class="built_in">int</span>s.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接收-----&gt;[<span class="symbol">I@</span><span class="number">6</span>d6f6e28</span><br></pre></td></tr></table></figure><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>示例3和示例1、2的输入结果不一样，这个就涉及到java的 泛型T 以及 基本数据类型和其对应的包装类 相关的知识点，可自行查阅其他资料。</p><p>我的理解是 fromArray(T… items) 泛型T 理解成Object，当传int类型数组时，会把整个array当做一个item对象，但是当传入int 类型的多个变量时会自动装箱成Integer。其他八种基本数据类型一样的。</p><p>接下来我们看下fromArray的源码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Observable&lt;T&gt; from<span class="constructor">Array(T<span class="operator">...</span> <span class="params">items</span>)</span> &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">items</span>, <span class="string">"items is null"</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (items.length<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">        return empty<span class="literal">()</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (items.length<span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">        return just(items<span class="literal">[<span class="number">0</span>]</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Assembly(<span class="params">new</span> ObservableFromArray&lt;T&gt;(<span class="params">items</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到当只有一个参数时，就调用 just(T item)，多个参数时调用的和多个参数的just()是一样的，具体的可以查看<a href="https://github.com/gs-wenbing/RxJavaDemo/tree/master/app/src/main/java/com/zwb/rxjavademo/RxAPI/RxJust" target="_blank" rel="noopener">just示例和源码解析</a></p><h4 id="fromCallable"><a href="#fromCallable" class="headerlink" title="fromCallable()"></a>fromCallable()</h4><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mDisposables</span><span class="selector-class">.add</span>(Observable</span><br><span class="line">        .fromCallable(new Callable&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public Integer call() throws Exception &#123;</span><br><span class="line">                return <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void accept(Integer i) throws Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">"接收-----&gt;"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接收<span class="comment">-----&gt;100</span></span><br></pre></td></tr></table></figure><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>我们先看下Callable是什么，原来是java.util.concurrent 包下的一个接口，里面只有一个带返回值的方法。<br>再看 fromCallable</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Observable&lt;T&gt; from<span class="constructor">Callable(Callable&lt;? <span class="params">extends</span> T&gt; <span class="params">supplier</span>)</span> &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">supplier</span>, <span class="string">"supplier is null"</span>)</span>;</span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Assembly(<span class="params">new</span> ObservableFromCallable&lt;T&gt;(<span class="params">supplier</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的装配了一个 ObservableFromCallable 返回，作为我们的被观察者。我们知道正真订阅是实现 subscribeActual 方法的 Observable 的子类里面，所以我们直接 ObservableFromCallable 类：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public final <span class="keyword">class</span> ObservableFromCallable&lt;T&gt; extends Observable&lt;T&gt; implements Callable&lt;T&gt; &#123;</span><br><span class="line"><span class="comment">//我们传进去的 Callable</span></span><br><span class="line">    final Callable&lt;? extends T&gt; callable;</span><br><span class="line">    public <span class="constructor">ObservableFromCallable(Callable&lt;? <span class="params">extends</span> T&gt; <span class="params">callable</span>)</span> &#123;</span><br><span class="line">        this.callable = callable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe<span class="constructor">Actual(Observer&lt;? <span class="params">super</span> T&gt; <span class="params">observer</span>)</span> &#123;</span><br><span class="line"><span class="comment">//通过我们创建的 observer 创建了一个DeferredScalarDisposable对象</span></span><br><span class="line">        DeferredScalarDisposable&lt;T&gt; d = <span class="keyword">new</span> DeferredScalarDisposable&lt;T&gt;(observer);</span><br><span class="line"><span class="comment">//执行订阅回调</span></span><br><span class="line">        observer.on<span class="constructor">Subscribe(<span class="params">d</span>)</span>;</span><br><span class="line"><span class="comment">//中断后直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (d.is<span class="constructor">Disposed()</span>) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        T value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//callable.call()就是我们new的 Callable 中 call 方法的返回值</span></span><br><span class="line"><span class="comment">//这里做了非空判断，若如为空，直接抛出异常</span></span><br><span class="line">            value = <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">callable</span>.<span class="params">call</span>()</span>, <span class="string">"Callable returned null"</span>);</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">e</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (!d.is<span class="constructor">Disposed()</span>) &#123;</span><br><span class="line">observer.on<span class="constructor">Error(<span class="params">e</span>)</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Error(<span class="params">e</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        d.complete(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public T call<span class="literal">()</span> throws Exception &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">callable</span>.<span class="params">call</span>()</span>, <span class="string">"The callable returned a null value"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面代码，我们看到，创建了一个 DeferredScalarDisposable 对象，最后执行了d.complete(value)。<br>接下来我们看 DeferredScalarDisposable 类的 complete 方法：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public final void complete(T value) &#123;</span><br><span class="line">    int <span class="keyword">state</span> = get();</span><br><span class="line">    if ((<span class="keyword">state</span> &amp; (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != <span class="number">0</span>) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Observer<span class="variable">&lt;? super T&gt;</span> a = downstream;</span><br><span class="line">    if (<span class="keyword">state</span> == FUSED_EMPTY) &#123;</span><br><span class="line">        this.value = value;</span><br><span class="line">        lazySet(FUSED_READY);</span><br><span class="line">        a.<span class="keyword">on</span>Next(null);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        lazySet(TERMINATED);</span><br><span class="line">// 执行回调 <span class="keyword">on</span>Next(),并把new的 Callable 中 call 方法的返回值作为参数</span><br><span class="line">        a.<span class="keyword">on</span>Next(value);</span><br><span class="line">    &#125;</span><br><span class="line">//假如没有执行dispose()，并执行完 <span class="keyword">on</span>Next 方法后，接着执行<span class="keyword">on</span>Complete</span><br><span class="line">    if (get() != DISPOSED) &#123;</span><br><span class="line">        a.<span class="keyword">on</span>Complete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上的分析，根据上面的分析,我们得出如下规则：</p><p>1、fromCallable 里的返回值就是 onNext 接收的参数。</p><p>2、通过 fromCallable() 方式 直接触发 onNext()，并执行 onComplete()。</p><h4 id="fromFuture"><a href="#fromFuture" class="headerlink" title="fromFuture()"></a>fromFuture()</h4><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"返回值"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Observable</span><br><span class="line">        .fromFuture(futureTask)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onSubscribe"</span>);</span><br><span class="line">                futureTask.run();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"接收-----&gt;"</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: onSubscribe</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: 接收<span class="comment">-----&gt;返回值</span></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>: onComplete</span><br></pre></td></tr></table></figure><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><p>我们先简单的看下Future 和 FutureTast 。Future类位于java.util.concurrent包下，它也是一个接口。</p><p>Future就是对于具体的 Runnable 或者 Callable 任务的执行结果进行取消、查询是否完成、获取结果。必要时可以通过get方法获取执行结果，该方法会阻塞直到任务返回结果。</p><p>FutureTask实现了RunableFuture接口，同时RunableFuture又继承Future，Runable接口，也就是说FutureTask具备Runbale的run方法执行异步任务，也可以像Future一样能够控制任务的执行。事实上，FutureTask是Future接口的一个唯一实现类。</p><p>详细用法查看<a href="http://www.cnblogs.com/dolphin0520/p/3949310.html" target="_blank" rel="noopener">Java并发编程：Callable、Future和FutureTask</a></p><p>接下来我们看下 fromFuture 的源码：</p><p>同样的装配了一个 ObservableFromFuture 返回，作为我们的被观察者。我们知道正真订阅是实现 subscribeActual 方法的 Observable 的子类里面，所以我们直接 ObservableFromFuture 类的：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void subscribe<span class="constructor">Actual(Observer&lt;? <span class="params">super</span> T&gt; <span class="params">observer</span>)</span> &#123;</span><br><span class="line">    DeferredScalarDisposable&lt;T&gt; d = <span class="keyword">new</span> DeferredScalarDisposable&lt;T&gt;(observer);</span><br><span class="line">    observer.on<span class="constructor">Subscribe(<span class="params">d</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (!d.is<span class="constructor">Disposed()</span>) &#123;</span><br><span class="line">        T v;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            v = <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">unit</span> != <span class="params">null</span> ? <span class="params">future</span>.<span class="params">get</span>(<span class="params">timeout</span>, <span class="params">unit</span>)</span> : future.get<span class="literal">()</span>, <span class="string">"Future returned null"</span>);</span><br><span class="line">        &#125; catch (Throwable ex) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">ex</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (!d.is<span class="constructor">Disposed()</span>) &#123;</span><br><span class="line">                observer.on<span class="constructor">Error(<span class="params">ex</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        d.complete(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法也很好理解，DeferredScalarDisposable 类和我们上面说的 fromCallable 的一样的，这里注意这一行代码：<br><code>v = ObjectHelper.requireNonNull(unit != null ? future.get(timeout, unit) : future.get(), &quot;Future returned null&quot;);</code></p><p>假如我们不执行 futureTask.run(); 就会一直阻塞。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;from示例和源码解析&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RxJava2" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/RxJava2/"/>
    
    
      <category term="Rxjava" scheme="http://www.wblog.work/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 - just示例和源码解析</title>
    <link href="http://www.wblog.work/Rxjava2-just%E7%A4%BA%E4%BE%8B%E5%92%8C%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.wblog.work/Rxjava2-just示例和源码解析/</id>
    <published>2019-10-08T05:11:27.000Z</published>
    <updated>2019-10-09T03:11:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>just示例和源码解析</p><a id="more"></a><p>just()示例</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Observable</span>.</span></span>just(<span class="string">"文章1"</span>, <span class="string">"文章2"</span>)</span><br><span class="line">          .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;<span class="literal">()</span> &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">Subscribe(Disposable <span class="params">d</span>)</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">" onSubscribe : "</span> + d.is<span class="constructor">Disposed()</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">Next(String <span class="params">value</span>)</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">" onNext : "</span> + value);</span><br><span class="line">                &#125;</span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">Error(Throwable <span class="params">e</span>)</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">" onError : "</span> + e.get<span class="constructor">Message()</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                @Override</span><br><span class="line">                public void on<span class="constructor">Complete()</span> &#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Log</span>.</span></span>d(TAG, <span class="string">" onComplete"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><p>Observable 的just()有10个重载方法，参数1~10个</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;<span class="built_in">T</span>&gt; Observable&lt;<span class="built_in">T</span>&gt; just(<span class="built_in">T</span> item)</span><br><span class="line">......</span><br><span class="line">public static &lt;<span class="built_in">T</span>&gt; Observable&lt;<span class="built_in">T</span>&gt; just(<span class="built_in">T</span> item1, <span class="built_in">T</span> item2, <span class="built_in">T</span> item3, <span class="built_in">T</span> item4, <span class="built_in">T</span> item5, <span class="built_in">T</span> item6, <span class="built_in">T</span> item7, <span class="built_in">T</span> item8, <span class="built_in">T</span> item9, <span class="built_in">T</span> item10)</span><br></pre></td></tr></table></figure><p>同样的我们从以下几个方面分析源码：</p><ul><li>被观察者Observable是何时创建</li><li>观察者Observer何时创建（很简单就一个接口，不多介绍）</li><li>被观察者与观察者如何建立subscribe订阅关系的</li></ul><h4 id="一个参数的-just"><a href="#一个参数的-just" class="headerlink" title="一个参数的 just()"></a>一个参数的 just()</h4><h5 id="1-被观察者Observable是何时创建"><a href="#1-被观察者Observable是何时创建" class="headerlink" title="1. 被观察者Observable是何时创建"></a>1. 被观察者Observable是何时创建</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> public static &lt;T&gt; Observable&lt;T&gt; just(T item) &#123;</span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">item</span>, <span class="string">"The item is null"</span>)</span>;</span><br><span class="line"><span class="comment">//创建ObservableJust对象，封装成被观察者Observable</span></span><br><span class="line">     return <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Assembly(<span class="params">new</span> ObservableJust&lt;T&gt;(<span class="params">item</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建了 ObservableJust 对象，调用 RxJavaPlugins.onAssembly 返回了被观察者 Observable.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Observable&lt;T&gt; onAssembly(@NonNull Observable&lt;T&gt; <span class="keyword">source</span>) &#123;</span><br><span class="line">    Function&lt;? <span class="keyword">super</span> Observable, ? <span class="keyword">extends</span> Observable&gt; f = onObservableAssembly;</span><br><span class="line">    <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> apply(f, <span class="keyword">source</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">source</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看下 ObservableJust 类，同样的也是继承 Observable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableJust</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">ScalarCallable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableJust</span><span class="params">(<span class="keyword">final</span> T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这个方法很重要， 等会会说到</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">        ScalarDisposable&lt;T&gt; sd = <span class="keyword">new</span> ScalarDisposable&lt;T&gt;(observer, value);</span><br><span class="line">        observer.onSubscribe(sd);</span><br><span class="line">        sd.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候被观察者已经创建完成了，它就是 Observable 的子类 ObservableJust，我们在用 Observable.just() 的时候其实被观察者是 ObservableJust。</p><h5 id="2-Observable-和-Observer-如何建立-subscribe-订阅关系的"><a href="#2-Observable-和-Observer-如何建立-subscribe-订阅关系的" class="headerlink" title="2. Observable 和 Observer 如何建立 subscribe 订阅关系的"></a>2. Observable 和 Observer 如何建立 subscribe 订阅关系的</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        observer = <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Subscribe(<span class="params">this</span>, <span class="params">observer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        subscribe<span class="constructor">Actual(<span class="params">observer</span>)</span>;</span><br><span class="line">    &#125; catch (NullPointerException e) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">e</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Error(<span class="params">e</span>)</span>;</span><br><span class="line"></span><br><span class="line">        npe.init<span class="constructor">Cause(<span class="params">e</span>)</span>;</span><br><span class="line">        throw npe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里的 Subscribe() 方法和 Observable.Create() 调的 Subscribe() 一样，我们知道 Subscribeactual() 这个方法是抽象方法，那它具体实现是不是和 Observable.Create() 一样也是 Observablecreate 类里呢？不是，不是，不是，重要的话说三遍哦，它的具体实现在我们看到 Observablejust 中。</strong></p><p>那么我们回到 ObservableJust 中看下subscribeActual(Observer&lt;? super T&gt; observer)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void subscribe<span class="constructor">Actual(Observer&lt;? <span class="params">super</span> T&gt; <span class="params">observer</span>)</span> &#123;</span><br><span class="line"><span class="comment">//创建了一个线程</span></span><br><span class="line">    ScalarDisposable&lt;T&gt; sd = <span class="keyword">new</span> ScalarDisposable&lt;T&gt;(observer, value);</span><br><span class="line"><span class="comment">//设置observer的回调方法onSubscribe</span></span><br><span class="line">    observer.on<span class="constructor">Subscribe(<span class="params">sd</span>)</span>;</span><br><span class="line"><span class="comment">//执行线程</span></span><br><span class="line">    sd.run<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面创建了一个线程（Runnable），他就是 ScalarDisposable ，ScalarDisposable实现Runnable，把我们创建的观察者Observer 和参数value （Observable.just(“文章1”) 这里的‘文章1’） 作为构造方法的参数传进去了，</p><p>同时他也是Disposable的子类，所以 <code>observer.onSubscribe(sd);</code> 这行就很好理解了，就是设置了观察者的onSubscribe方法的回调，所以观察者onSubscribe()是在订阅时被调用，也就是在事件执行之前调用。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;<span class="built_in">String</span>&gt; observer = <span class="literal">new</span> Observer&lt;<span class="built_in">String</span>&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           <span class="keyword">public</span> <span class="literal">void</span> onSubscribe(Disposable d) &#123;</span><br><span class="line">               <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">"onSubscribe"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">    <span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure><p>接下来看下 ScalarDisposable  类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ScalarDisposable</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AtomicInteger</span>  <span class="keyword">implements</span> <span class="title">QueueDisposable</span>&lt;<span class="title">T</span>&gt;, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3880992722410194083L</span>;</span><br><span class="line"><span class="comment">//我们创建的观察者</span></span><br><span class="line">    <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; observer;</span><br><span class="line"><span class="comment">//我们在just中传递的参数（文章1）</span></span><br><span class="line">    <span class="keyword">final</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FUSED = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ON_NEXT = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ON_COMPLETE = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScalarDisposable</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer, T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observer = observer;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (get() == START &amp;&amp; compareAndSet(START, ON_NEXT)) &#123;</span><br><span class="line">            observer.onNext(value);</span><br><span class="line">            <span class="keyword">if</span> (get() == ON_NEXT) &#123;</span><br><span class="line">                lazySet(ON_COMPLETE);</span><br><span class="line">                observer.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在subscribeActual()方法中看到最后执行了 sd.run(); 所以我们只需看 public void run() 这个方法，<br>run()方法首先执行了 observer.onNext(value)， 也就是说我们在创建Observable时传的参数此时发送给observer，<br>然后在执行observer.onComplete()。</p><p>这样，Observable.just() 一个参数的方法就结束了</p><h4 id="多个参数的-just"><a href="#多个参数的-just" class="headerlink" title="多个参数的 just()"></a>多个参数的 just()</h4><p>同样的我们从以下几个方面分析源码：</p><h5 id="1-被观察者Observable是何时创建-1"><a href="#1-被观察者Observable是何时创建-1" class="headerlink" title="1. 被观察者Observable是何时创建"></a>1. 被观察者Observable是何时创建</h5><p>我们下看源码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Observable&lt;T&gt; just(T item1, T item2) &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">item1</span>, <span class="string">"The first item is null"</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">item2</span>, <span class="string">"The second item is null"</span>)</span>;</span><br><span class="line"></span><br><span class="line">    return from<span class="constructor">Array(<span class="params">item1</span>, <span class="params">item2</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，在往下看 fromArray()</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Observable&lt;T&gt; from<span class="constructor">Array(T<span class="operator">...</span> <span class="params">items</span>)</span> &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">ObjectHelper</span>.</span></span>require<span class="constructor">NonNull(<span class="params">items</span>, <span class="string">"items is null"</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (items.length<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">        return empty<span class="literal">()</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (items.length<span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">        return just(items<span class="literal">[<span class="number">0</span>]</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Assembly(<span class="params">new</span> ObservableFromArray&lt;T&gt;(<span class="params">items</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到fromArray()参数是 可变长度参数，也就是说参数可以为1个，当然了1个时直接调用Observable.just(“文章1”) 一个参数的just()。最后返回一个可变长度参数 items 构造的 ObservableFromArray 对象，他也继承了Observable，也就是说我们创建的被观察着就是 ObservableFromArray 对象。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="symbol">ObservableFromArray</span>&lt;<span class="symbol">T</span>&gt; <span class="symbol">extends</span> <span class="symbol">Observable</span>&lt;<span class="symbol">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> T[] <span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">public</span> ObservableFromArray(T[] <span class="built_in">array</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">array</span> = <span class="built_in">array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> subscribeActual(Observer&lt;? <span class="keyword">super</span> T&gt; observer) &#123;</span><br><span class="line">        FromArrayDisposable&lt;T&gt; d = new FromArrayDisposable&lt;T&gt;(observer, <span class="built_in">array</span>);</span><br><span class="line"></span><br><span class="line">        observer.onSubscribe(d);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (d.fusionMode) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        d.run();</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h5 id="2-接下来我们看下subscribe方法"><a href="#2-接下来我们看下subscribe方法" class="headerlink" title="2. 接下来我们看下subscribe方法"></a>2. 接下来我们看下subscribe方法</h5><p>同样是</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        observer = <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Subscribe(<span class="params">this</span>, <span class="params">observer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        subscribe<span class="constructor">Actual(<span class="params">observer</span>)</span>;</span><br><span class="line">    &#125; catch (NullPointerException e) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">e</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Error(<span class="params">e</span>)</span>;</span><br><span class="line"></span><br><span class="line">        npe.init<span class="constructor">Cause(<span class="params">e</span>)</span>;</span><br><span class="line">        throw npe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但是抽象方法subscribeActual()在ObservableFromArray中执行</strong><br>在看ObservableFromArray的subscribeActual()这个方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    FromArrayDisposable&lt;T&gt; d = <span class="keyword">new</span> FromArrayDisposable&lt;T&gt;(observer, array);</span><br><span class="line"></span><br><span class="line">    observer.onSubscribe(d);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (d.fusionMode) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时创建了FromArrayDisposable对象，参数是我们创建的观察者observer，和传递的可变长度的参数array，然后执行Observer中的onSubscribe()方法。最后执行了FromArrayDisposable的run()方法（注意他不是线程的run()方法）。</p><p>我们在看FromArrayDisposable的run()方法</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">static <span class="keyword">final</span> <span class="keyword">class</span> <span class="symbol">FromArrayDisposable</span>&lt;<span class="symbol">T</span>&gt; <span class="symbol">extends</span> <span class="symbol">BasicQueueDisposable</span>&lt;<span class="symbol">T</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; downstream;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> T[] <span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line">    FromArrayDisposable(Observer&lt;? <span class="keyword">super</span> T&gt; actual, T[] <span class="built_in">array</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.downstream = actual;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">array</span> = <span class="built_in">array</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span> run() &#123;</span><br><span class="line">        T[] a = <span class="built_in">array</span>;</span><br><span class="line">        <span class="built_in">int</span> n = a.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; !isDisposed(); i++) &#123;</span><br><span class="line">            T value = a[i];</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                downstream.onError(new NullPointerException(<span class="string">"The "</span> + i + <span class="string">"th element is null"</span>));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            downstream.onNext(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            downstream.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量downstream 就是我们创建的观察者 Observer ，array 就是我们传递的可变长度的那一串数组<br><br>run()方法中遍历array，然后执行回调 downstream.onNext(value) ，最后在执行回调 downstream.onComplete()。<br></p><p>根据上面的分析,我们得出如下规则：</p><p>1、通过 just() 方式 直接触发 onNext()</p><p>2、just 传进去什么，在onNext() 接收什么，如果我们传入 List，同样的在 onNext() 接收的也是 List，而不是 List 的 Item</p><p>3、onNext() 中接收数据的顺序是根据 just 传入的顺序确认的，使用 just 不允许传递 null，否则会出现异常</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;just示例和源码解析&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RxJava2" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/RxJava2/"/>
    
    
      <category term="Rxjava" scheme="http://www.wblog.work/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 - Observable示例和源码解析</title>
    <link href="http://www.wblog.work/Rxjava2-Observable%E7%A4%BA%E4%BE%8B%E5%92%8C%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.wblog.work/Rxjava2-Observable示例和源码解析/</id>
    <published>2019-10-08T03:21:27.000Z</published>
    <updated>2019-10-09T03:12:03.527Z</updated>
    
    <content type="html"><![CDATA[<p>Observable示例和源码解析</p><a id="more"></a><p><strong>示例</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建一个被观察着(公众号),定义要发送的事件</span></span><br><span class="line">Observable&lt;<span class="built_in">String</span>&gt; observable = Observable.create(<span class="literal">new</span> ObservableOnSubscribe&lt;<span class="built_in">String</span>&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> subscribe(ObservableEmitter&lt;<span class="built_in">String</span>&gt; emitter) throws Exception &#123;</span><br><span class="line">emitter.onNext(<span class="string">"文章1"</span>);</span><br><span class="line">emitter.onNext(<span class="string">"文章2"</span>);</span><br><span class="line">emitter.onNext(<span class="string">"文章3"</span>);</span><br><span class="line">emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//2、创建一个观察着（用户），接收事件并作出响应操作</span></span><br><span class="line">Observer&lt;<span class="built_in">String</span>&gt; observer = <span class="literal">new</span> Observer&lt;<span class="built_in">String</span>&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> onSubscribe(Disposable d) &#123;</span><br><span class="line"><span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">"onSubscribe"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> onNext(<span class="built_in">String</span> str) &#123;</span><br><span class="line"><span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">"onNext : "</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> onError(Throwable e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> onComplete() &#123;</span><br><span class="line"><span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">"onComplete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//建立用户和公众号的订阅关系</span></span><br><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure><p>其实RxJava的核心思想就是观察者模式，只要理解这个，其实RxJava也不难。说白了就是要有观察者和被观察着，然后建立观察者和被观察者之间的关系。</p><ul><li>被观察者Observable（公众号）何时创建？</li><li>观察者Observer（用户）何时创建？</li><li>被观察者与观察者如何subscribe（用户关注了公众号）订阅？<h5 id="1-被观察者Observable类"><a href="#1-被观察者Observable类" class="headerlink" title="1. 被观察者Observable类"></a>1. 被观察者Observable类</h5></li></ul><p><strong>被观察者Observable为抽象类 实现 ObservableSource接口</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Observable&lt;<span class="literal">T</span>&gt; implements ObservableSource&lt;<span class="literal">T</span>&gt; &#123;</span><br><span class="line"><span class="keyword">...</span></span><br><span class="line">public static &lt;<span class="literal">T</span>&gt; Observable&lt;<span class="literal">T</span>&gt; create(ObservableOnSubscribe&lt;<span class="literal">T</span>&gt; <span class="keyword">source</span>) &#123;</span><br><span class="line">        ObjectHelper.requireNonNull(<span class="keyword">source</span>, <span class="string">"source is null"</span>);</span><br><span class="line">        <span class="keyword">return</span> RxJavaPlugins.onAssembly(new ObservableCreate&lt;<span class="literal">T</span>&gt;(<span class="keyword">source</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，create方法里面就两行代码，先去判断source的是否为空，然后再去调用RxJavaPlugins.onAssembly(new ObservableCreate<t>(source))，先 new 了 ObservableCreate 类，该类继承了 Observable，然后通过 RxJavaPlugins.onAssembly 方法返回 Observable 对象。</t></p><p><strong>这样 Observable 就创建完成了，其实是创建了 Observable 的子类 ObservableCreate 对象，也就是真实的被观察着对象</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableCreate&lt;T&gt;</span> <span class="keyword">extends</span> <span class="title">Observable&lt;T&gt;</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ObservableOnSubscribe</span>&lt;<span class="type">T</span>&gt; source;</span><br><span class="line">    public <span class="type">ObservableCreate</span>(<span class="type">ObservableOnSubscribe</span>&lt;<span class="type">T</span>&gt; source) &#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这个方法很重要，Observable 的 subscribe 其实就执行的这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void subscribeActual(<span class="type">Observer</span>&lt;? <span class="keyword">super</span> <span class="type">T</span>&gt; observer) &#123;</span><br><span class="line">        <span class="type">CreateEmitter</span>&lt;<span class="type">T</span>&gt; parent = <span class="keyword">new</span> <span class="type">CreateEmitter</span>&lt;<span class="type">T</span>&gt;(observer);</span><br><span class="line">        observer.onSubscribe(parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            source.subscribe(parent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</span><br><span class="line">            <span class="type">Exceptions</span>.throwIfFatal(ex);</span><br><span class="line">            parent.onError(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-观察者-Observer"><a href="#2-观察者-Observer" class="headerlink" title="2. 观察者 Observer"></a>2. 观察者 Observer</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//订阅时回调</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span></span>;</span><br><span class="line"><span class="comment">//成功回调</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull T t)</span></span>;</span><br><span class="line"><span class="comment">//错误回调</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span></span>;</span><br><span class="line"><span class="comment">//完成时回调</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类十分简单，是标准的函数式接口</p><h5 id="3-被观察者与观察者如何subscribe（用户关注了公众号）订阅"><a href="#3-被观察者与观察者如何subscribe（用户关注了公众号）订阅" class="headerlink" title="3. 被观察者与观察者如何subscribe（用户关注了公众号）订阅"></a>3. 被观察者与观察者如何subscribe（用户关注了公众号）订阅</h5><p><code>observable.subscribe(observer);</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    observer = <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Subscribe(<span class="params">this</span>, <span class="params">observer</span>)</span>;</span><br><span class="line"></span><br><span class="line">    subscribe<span class="constructor">Actual(<span class="params">observer</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RxJavaPlugins.onSubscribe 此时直接返回Observer观察者对象，最后执行的是 subscribeActual() 方法，我们点进去看看</p><p><code>protected abstract void subscribeActual(Observer&lt;? super T&gt; observer);</code></p><p>是个抽象方法，我们来看看 Observable 子类 ObservableCreate 里面是不是有 subscribeActual(Observer&lt;? super T&gt; observer)，又回到了 ObservableCreate 类。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void subscribe<span class="constructor">Actual(Observer&lt;? <span class="params">super</span> T&gt; <span class="params">observer</span>)</span> &#123;</span><br><span class="line">    CreateEmitter&lt;T&gt; parent = <span class="keyword">new</span> CreateEmitter&lt;T&gt;(observer);</span><br><span class="line">    observer.on<span class="constructor">Subscribe(<span class="params">parent</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        source.subscribe(parent);</span><br><span class="line">    &#125; catch (Throwable ex) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">ex</span>)</span>;</span><br><span class="line">        parent.on<span class="constructor">Error(<span class="params">ex</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的参数就是我们创建的观察者 Observer，这里创建了 CreateEmitter 对象，把我们的观察者 Observer 传到 CreateEmitter 的构造方法中。<br>CreateEmitter 类继承了 Disposable 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateEmitter</span>&lt;<span class="title">T</span>&gt;  <span class="keyword">extends</span> <span class="title">AtomicReference</span>&lt;<span class="title">Disposable</span>&gt; <span class="keyword">implements</span> <span class="title">ObservableEmitter</span>&lt;<span class="title">T</span>&gt;, <span class="title">Disposable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; observer;</span><br><span class="line"></span><br><span class="line">       CreateEmitter(Observer&lt;? <span class="keyword">super</span> T&gt; observer) &#123;</span><br><span class="line">           <span class="keyword">this</span>.observer = observer;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//最终的回调就是我们创建的观察者 Observer 的 onNext()</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">               observer.onNext(t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (!tryOnError(t)) &#123;</span><br><span class="line">               RxJavaPlugins.onError(t);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//最终的回调就是我们创建的观察者 Observer 的 onError()</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryOnError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   observer.onError(t);</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   dispose();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//最终的回调就是我们创建的观察者 Observer 的 onComplete()</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   observer.onComplete();</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   dispose();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   ......</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>是不是看到了我们在创建观察者 Observer 时的几个回调方法了，</p><p>接下来<code>observer.onSubscribe(parent);</code>这行代码，其实就是我们创建观察者 Observer 时的</p><p><code>public void onSubscribe(Disposable d)</code> 回调</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;<span class="built_in">String</span>&gt; observer = <span class="literal">new</span> Observer&lt;<span class="built_in">String</span>&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           <span class="keyword">public</span> <span class="literal">void</span> onSubscribe(Disposable d) &#123;</span><br><span class="line">               <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">"onSubscribe"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">    <span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure><p>的参数 Disposable d 就是 CreateEmitter 对象</p><p>再看  <code>source.subscribe(parent);</code> 这行代码，这个source就是我们创建被观察者 Observable（其实是它的子类 ObservableCreate）时 new 的 ObservableOnSubscribe，它只有一个 subscribe 方法，执行完这行代码，被观察者与观察者就订阅关系。</p><p>那么当我们在执行</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">emitter.onNext(<span class="string">"文章1"</span>)<span class="comment">;</span></span><br><span class="line">emitter.onNext(<span class="string">"文章2"</span>)<span class="comment">;</span></span><br><span class="line">emitter.onNext(<span class="string">"文章3"</span>)<span class="comment">;</span></span><br><span class="line">emitter.onComplete()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这几行代码的时候，也就是被观察者 Observable 通过CreateEmitter发送事件时，观察者 Observer 就会走相应的回调方法，<br>当此执行完 onComplete() 观察者收到完成回调，整个订阅流程就完成了。</p><p>Observable.subscribe()除了接收Observer参数外，还可以接收Consumer参数</p><p><strong>示例</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                emitter.onNext(<span class="string">"文章1"</span>);</span><br><span class="line">                emitter.onNext(<span class="string">"文章2"</span>);</span><br><span class="line">                emitter.onNext(<span class="string">"文章3"</span>);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">" Consumer : onNext : "</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">" Consumer : onError"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Action() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">" Action : onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Disposable disposable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">" Consumer : onSubscribe"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>这里我们看到传入的是Consumer，我们来看看这个类：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>Consumer&lt;T&gt; &#123;</span><br><span class="line">    void accept(T t) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，就是个普通的接口，里面只有一个accept方法</p><p>当使用Consumer作为subscribe()的参数时，最多可以接收4个回调参数，而且执行结果和subscribe(observer)的一样。<br>接下来我们看下Observable的subscribe()方法</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public final Disposable subscribe() &#123;</span><br><span class="line">    return subscribe(Functions.emptyConsumer(), Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION, Functions.emptyConsumer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final Disposable subscribe(Consumer<span class="variable">&lt;? super T&gt;</span> <span class="keyword">on</span>Next) &#123;</span><br><span class="line">    return subscribe(<span class="keyword">on</span>Next, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION, Functions.emptyConsumer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final Disposable subscribe(Consumer<span class="variable">&lt;? super T&gt;</span> <span class="keyword">on</span>Next, Consumer<span class="variable">&lt;? super Throwable&gt;</span> <span class="keyword">on</span>Error) &#123;</span><br><span class="line">    return subscribe(<span class="keyword">on</span>Next, <span class="keyword">on</span>Error, Functions.EMPTY_ACTION, Functions.emptyConsumer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final Disposable subscribe(Consumer<span class="variable">&lt;? super T&gt;</span> <span class="keyword">on</span>Next, Consumer<span class="variable">&lt;? super Throwable&gt;</span> <span class="keyword">on</span>Error,</span><br><span class="line">                                  Action <span class="keyword">on</span>Complete) &#123;</span><br><span class="line">    return subscribe(<span class="keyword">on</span>Next, <span class="keyword">on</span>Error, <span class="keyword">on</span>Complete, Functions.emptyConsumer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final Disposable subscribe(Consumer<span class="variable">&lt;? super T&gt;</span> <span class="keyword">on</span>Next, Consumer<span class="variable">&lt;? super Throwable&gt;</span> <span class="keyword">on</span>Error,</span><br><span class="line">                                  Action <span class="keyword">on</span>Complete, Consumer<span class="variable">&lt;? super Disposable&gt;</span> <span class="keyword">on</span>Subscribe) &#123;</span><br><span class="line">    ObjectHelper.requireN<span class="keyword">on</span>Null(<span class="keyword">on</span>Next, <span class="string">"onNext is null"</span>);</span><br><span class="line">    ObjectHelper.requireN<span class="keyword">on</span>Null(<span class="keyword">on</span>Error, <span class="string">"onError is null"</span>);</span><br><span class="line">    ObjectHelper.requireN<span class="keyword">on</span>Null(<span class="keyword">on</span>Complete, <span class="string">"onComplete is null"</span>);</span><br><span class="line">    ObjectHelper.requireN<span class="keyword">on</span>Null(<span class="keyword">on</span>Subscribe, <span class="string">"onSubscribe is null"</span>);</span><br><span class="line"></span><br><span class="line">    LambdaObserver<span class="variable">&lt;T&gt;</span> ls = new LambdaObserver<span class="variable">&lt;T&gt;</span>(<span class="keyword">on</span>Next, <span class="keyword">on</span>Error, <span class="keyword">on</span>Complete, <span class="keyword">on</span>Subscribe);</span><br><span class="line"></span><br><span class="line">    subscribe(ls);</span><br><span class="line"></span><br><span class="line">    return ls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有五个重载方法，参数个数0到4个，参数名和接口Observer的方法名一样，从而我们可以猜测处理的事情应该和Observer每个方法的一样。我们看到 当参数少于4个时，就传入空的回调（不是null），那么我们直接看4个参数的subscribe()。</p><p>先分别判断参数是否为空，然后通过这个4个参数构造一个 LambdaObserver 对象，最后调用subscribe(ls)，这个subscribe(ls)又是什么呢？我们点进去看看：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        observer = <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Subscribe(<span class="params">this</span>, <span class="params">observer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        subscribe<span class="constructor">Actual(<span class="params">observer</span>)</span>;</span><br><span class="line">    &#125; catch (NullPointerException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Exceptions</span>.</span></span>throw<span class="constructor">IfFatal(<span class="params">e</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">RxJavaPlugins</span>.</span></span>on<span class="constructor">Error(<span class="params">e</span>)</span>;</span><br><span class="line"></span><br><span class="line">        npe.init<span class="constructor">Cause(<span class="params">e</span>)</span>;</span><br><span class="line">        throw npe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯？似曾相识，对，就是我们认识的那个subscribe，参数就是上面创建的 LambdaObserver 对象，LambdaObserver继承了接口Observer，然后在传入 subscribeActual(observer) ，接下来的流程就和上面一样了。</p><p>我们在看 LambdaObserver 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaObserver</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AtomicReference</span>&lt;<span class="title">Disposable</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt;, <span class="title">Disposable</span>, <span class="title">LambdaConsumerIntrospection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7251123623727029452L</span>;</span><br><span class="line">    <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> T&gt; onNext;</span><br><span class="line">    <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> Throwable&gt; onError;</span><br><span class="line">    <span class="keyword">final</span> Action onComplete;</span><br><span class="line">    <span class="keyword">final</span> Consumer&lt;? <span class="keyword">super</span> Disposable&gt; onSubscribe;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LambdaObserver</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; onNext, Consumer&lt;? <span class="keyword">super</span> Throwable&gt; onError,</span></span></span><br><span class="line"><span class="function"><span class="params">            Action onComplete,</span></span></span><br><span class="line"><span class="function"><span class="params">            Consumer&lt;? <span class="keyword">super</span> Disposable&gt; onSubscribe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.onNext = onNext;</span><br><span class="line">        <span class="keyword">this</span>.onError = onError;</span><br><span class="line">        <span class="keyword">this</span>.onComplete = onComplete;</span><br><span class="line">        <span class="keyword">this</span>.onSubscribe = onSubscribe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用观察者的 onSubscribe()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DisposableHelper.setOnce(<span class="keyword">this</span>, d)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                onSubscribe.accept(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(ex);</span><br><span class="line">                d.dispose();</span><br><span class="line">                onError(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用观察者的 onNext()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                onNext.accept(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(e);</span><br><span class="line">                get().dispose();</span><br><span class="line">                onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用观察者的 onError()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            lazySet(DisposableHelper.DISPOSED);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                onError.accept(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(e);</span><br><span class="line">                RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            RxJavaPlugins.onError(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用观察者的 onComplete()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            lazySet(DisposableHelper.DISPOSED);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                onComplete.run();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(e);</span><br><span class="line">                RxJavaPlugins.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法里面就是我们传进去的四个参数，而且有四个方法我们似乎也很熟悉，对，他就是接口 Observer 的实现方法。这四个方法中分别执行了四个回调</p><p> onSubscribe.accept(Disposable);</p><p> onNext.accept(T);</p><p> onError.accept(Throwable);</p><p> onComplete.run();</p><p>也就是subscribe时传入的回调。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Observable示例和源码解析&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RxJava2" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/RxJava2/"/>
    
    
      <category term="Rxjava" scheme="http://www.wblog.work/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>EasyUI的对话框（dialog）按钮重复点击的问题</title>
    <link href="http://www.wblog.work/easyui-repeatclick/"/>
    <id>http://www.wblog.work/easyui-repeatclick/</id>
    <published>2019-09-27T06:21:27.000Z</published>
    <updated>2019-09-27T06:47:09.976Z</updated>
    
    <content type="html"><![CDATA[<p>EasyUI的对话框（dialog）按钮重复点击，导致多次请求数据</p><a id="more"></a><p>第一种实现思路，点击一次后把请求数据的按钮设置为disable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#mydialog'</span>).dialog(&#123;</span><br><span class="line">    width: <span class="number">500</span>,</span><br><span class="line">    height: <span class="number">250</span>,</span><br><span class="line">    modal: <span class="literal">true</span>,</span><br><span class="line">    title: <span class="string">'my dialog'</span>,</span><br><span class="line">    iconCls: <span class="string">'icon-edit'</span>,</span><br><span class="line">    minimizable: <span class="literal">false</span>,</span><br><span class="line">    closed: <span class="literal">true</span>,</span><br><span class="line">    maximizable: <span class="literal">false</span>,</span><br><span class="line">    buttons: [</span><br><span class="line">        &#123;</span><br><span class="line">            id:<span class="string">"submit"</span>,</span><br><span class="line">            text: <span class="string">'确定'</span>,</span><br><span class="line">            iconCls: <span class="string">'icon-ok'</span>,</span><br><span class="line">            handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                requestData(<span class="keyword">this</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            text: <span class="string">'关闭'</span>,</span><br><span class="line">            iconCls: <span class="string">'icon-no'</span>,</span><br><span class="line">            handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">'#mydialog'</span>).dialog(<span class="string">"close"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    onClose: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#form1"</span>).form(<span class="string">"clear"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params">button</span>) </span>&#123;</span><br><span class="line">    $(button).linkbutton(<span class="string">'disable'</span>);</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line">    <span class="keyword">var</span> param=&#123;&#125;;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/api/requestData'</span>,</span><br><span class="line">        type: <span class="string">'post'</span>,</span><br><span class="line">        data: &#123; param &#125;,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">$(button).linkbutton(<span class="string">'enable'</span>);</span><br><span class="line">            <span class="keyword">if</span> (res.IsSuccess) &#123;</span><br><span class="line">                $.messager.alert(<span class="string">"提示"</span>, <span class="string">"操作成功"</span>, <span class="string">"info"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    location.reload();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $.messager.alert(<span class="string">"提示"</span>, res.ErrMsg, <span class="string">"info"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(button).linkbutton(<span class="string">'enable'</span>); </span><br><span class="line">            $.messager.alert(<span class="string">'提示'</span>, <span class="string">'请求出错！'</span>, <span class="string">'error'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意EasyUI的dialog的按钮设置disable和jQuery不一样，jQuery通过$(button).attr(‘disable’:”true”)来设置，但是EasyUI是通过$(button).linkbutton(‘enable’)来设置。</p><p>第二种方式，给button设置flag，点击一次后flag设置1，判断flag为1时提示toast</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#mydialog'</span>).dialog(&#123;</span><br><span class="line">    width: <span class="number">500</span>,</span><br><span class="line">    height: <span class="number">250</span>,</span><br><span class="line">    modal: <span class="literal">true</span>,</span><br><span class="line">    title: <span class="string">'my dialog'</span>,</span><br><span class="line">    iconCls: <span class="string">'icon-edit'</span>,</span><br><span class="line">    minimizable: <span class="literal">false</span>,</span><br><span class="line">    closed: <span class="literal">true</span>,</span><br><span class="line">    maximizable: <span class="literal">false</span>,</span><br><span class="line">    buttons: [</span><br><span class="line">        &#123;</span><br><span class="line">            id:<span class="string">"submit"</span>,</span><br><span class="line">            text: <span class="string">'确定'</span>,</span><br><span class="line">            iconCls: <span class="string">'icon-ok'</span>,</span><br><span class="line">            handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>($(<span class="string">'#submit'</span>).attr(<span class="string">"flag"</span>)!=<span class="number">1</span>)&#123;</span><br><span class="line">                    requestData();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $.messager.show(&#123;</span><br><span class="line">                        title:<span class="string">' '</span>,</span><br><span class="line">                        msg:<span class="string">'请不要重复提交'</span>,</span><br><span class="line">                        showType:<span class="string">'fade'</span>,</span><br><span class="line">                        timeout:<span class="number">1000</span>,</span><br><span class="line">                        style:&#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">'#submit'</span>).attr(<span class="string">"flag"</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            text: <span class="string">'关闭'</span>,</span><br><span class="line">            iconCls: <span class="string">'icon-no'</span>,</span><br><span class="line">            handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">'#mydialog'</span>).dialog(<span class="string">"close"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    onClose: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#form1"</span>).form(<span class="string">"clear"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line">    <span class="keyword">var</span> param=&#123;&#125;;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/api/requestData'</span>,</span><br><span class="line">        type: <span class="string">'post'</span>,</span><br><span class="line">        data: &#123; param &#125;,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#submit'</span>).removeAttr(<span class="string">"flag"</span>);</span><br><span class="line">            <span class="keyword">if</span> (res.IsSuccess) &#123;</span><br><span class="line">                $.messager.alert(<span class="string">"提示"</span>, <span class="string">"操作成功"</span>, <span class="string">"info"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    location.reload();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $.messager.alert(<span class="string">"提示"</span>, res.ErrMsg, <span class="string">"info"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#submit'</span>).removeAttr(<span class="string">"flag"</span>);</span><br><span class="line">            $.messager.alert(<span class="string">'提示'</span>, <span class="string">'请求出错！'</span>, <span class="string">'error'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考EasyUI官网：<br><a href="http://www.jeasyui.com/documentation/index.php#" target="_blank" rel="noopener">http://www.jeasyui.com/documentation/index.php#</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EasyUI的对话框（dialog）按钮重复点击，导致多次请求数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://www.wblog.work/tags/js/"/>
    
      <category term="EasyUI" scheme="http://www.wblog.work/tags/EasyUI/"/>
    
  </entry>
  
  <entry>
    <title>HTML select的onchange()事件不触发</title>
    <link href="http://www.wblog.work/HTML-selecton-change/"/>
    <id>http://www.wblog.work/HTML-selecton-change/</id>
    <published>2019-09-27T03:21:27.000Z</published>
    <updated>2019-09-27T06:50:31.770Z</updated>
    
    <content type="html"><![CDATA[<p>最近在帮后端修改bug，本来对js 只是熟悉，没有达到深入的层次，今天遇到了一个select的onchange()事件不触发的问题，记录一下，以备后续需要。</p><a id="more"></a><p>下面是代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//省去无关代码</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">select</span> onchange="fun()" id="CategoryName"  <span class="keyword">class</span>="easyui-combobox"  editable="false"&gt;</span><br><span class="line">&lt;<span class="keyword">option</span> <span class="keyword">value</span>=""&gt;全部&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">@<span class="keyword">foreach</span> (var item <span class="keyword">in</span> noticeCategoryGroup)</span><br><span class="line"> &#123;</span><br><span class="line"> &lt;<span class="keyword">option</span> <span class="keyword">value</span>="@item.Key"&gt;@item.<span class="keyword">Value</span>&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br><span class="line"></span><br><span class="line">//省去无关代码</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> fun()&#123;</span><br><span class="line">alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上面代码中死活不能触发onchange，各种百度，都是这样写的，又试了下面这种方式：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#CategoryName'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>还是不行，奇了怪了。在仔细一看会不会是 easyui-combobox在捣鬼。</p><p>于是又搜easyui-combobox的onchange()的事件，果然是！</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#CategoryName'</span>).combobox(&#123;</span><br><span class="line">        onChange:<span class="function"><span class="keyword">function</span>(<span class="params">n,o</span>)</span>&#123;</span><br><span class="line">           alert(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>n代表选中的新值，o代表上一个值。</p><p>下面是easyui-combobox的所有事件：</p><p><img src="/HTML-selecton-change/combobox-onchange.png" alt><br>参考EasyUI官网：<br><a href="http://www.jeasyui.com/documentation/index.php#" target="_blank" rel="noopener">http://www.jeasyui.com/documentation/index.php#</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在帮后端修改bug，本来对js 只是熟悉，没有达到深入的层次，今天遇到了一个select的onchange()事件不触发的问题，记录一下，以备后续需要。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://www.wblog.work/tags/js/"/>
    
      <category term="EasyUI" scheme="http://www.wblog.work/tags/EasyUI/"/>
    
      <category term="HTML" scheme="http://www.wblog.work/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 - RxScheduler示例和详细解析</title>
    <link href="http://www.wblog.work/rxjava-schedul/"/>
    <id>http://www.wblog.work/rxjava-schedul/</id>
    <published>2019-09-25T03:21:27.000Z</published>
    <updated>2019-09-27T01:42:14.607Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>首先了解 Schedulers 和 Scheduler 的概念<br>Scheduler 是负责执行任务的单元, 调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程，而 Schedulers 是创建各种 Scheduler 的工厂，Schedulers.io()等等都返回的是 Scheduler。</p><a id="more"></a><p>我们可以使用使用 subscribeOn() 和 observeOn() 两个方法来对线程进行控制。<br>比如常用的 Observable 生成发射数据流，以及 Operators 加工数据流都是在后台线程中进行，而 Observer 在前台线程中接受并相应数据。</p><h5 id="subscribeOn-和-observeOn"><a href="#subscribeOn-和-observeOn" class="headerlink" title="subscribeOn() 和 observeOn()"></a>subscribeOn() 和 observeOn()</h5><ul><li><p>subscribeOn(): 指定 ObservableOnSubscribe#subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程，我把他叫做上游。<br>当调用多次 subscribeOn() 时，事件产生会运行在最早的一次调用声明的线程中。当然也不是说多次的调用是完全没效果的，后面会提到。</p></li><li><p>observeOn(): 指定 Observer 所运行在的线程。或者叫做事件消费的线程，我把他叫做下游。每次调用 observeOn() 都会发生线程切换，此次调用直到下次切换线程中间的过程中的操作运行在此次调用指定的线程中。</p></li></ul><h5 id="RxJava-提供了以下这些调度器："><a href="#RxJava-提供了以下这些调度器：" class="headerlink" title="RxJava 提供了以下这些调度器："></a>RxJava 提供了以下这些调度器：</h5><ul><li><p>Schedulers.single();<br>运行在一个单独的线程，顺序执行，先进先出</p></li><li><p>Schedulers.computation();<br>计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算；<br>默认线程数等于处理器的数量。 不要执行阻塞、IO操作(IO操作请使用Schedulers.io())</p></li><li><p>Schedulers.io();<br>I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程</p></li><li><p>Schedulers.trampoline();<br>在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行</p></li><li><p>Schedulers.newThread();<br>总是启用新线程，并在新线程执行操作</p></li><li><p>Schedulers.from(@NonNull Executor executor);<br>使用指定的 Executor 作为调度器</p></li><li><p>AndroidSchedulers.mainThread();<br>它指定的操作将在 Android 主线程运行</p></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>以下示例部分参考：<a href="https://www.jianshu.com/p/12638513424f" target="_blank" rel="noopener">https://www.jianshu.com/p/12638513424f</a><br>自己再敲一遍，有助于更深层的理解</p><p><strong>示例1 使用一次subscribeOn和一次observeOn：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (<span class="built_in">int</span> i =<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"发射线程："</span>+<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"----&gt;"</span>+<span class="string">"发射："</span>+i);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">1000</span>);</span><br><span class="line">            emitter.on<span class="constructor">Next(<span class="params">i</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.on<span class="constructor">Complete()</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe<span class="constructor">On(Schedulers.<span class="params">io</span>()</span>)</span><br><span class="line">    .observe<span class="constructor">On(AndroidSchedulers.<span class="params">mainThread</span>()</span>)</span><br><span class="line">    .subscribe(integer -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收线程："</span>+<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"----&gt;"</span>+<span class="string">"接收："</span>+integer)));</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发射线程：R<span class="function"><span class="title">xCachedThreadScheduler</span>-1----&gt;</span>发射：<span class="number">1</span></span><br><span class="line">发射线程：R<span class="function"><span class="title">xCachedThreadScheduler</span>-1----&gt;</span>发射：<span class="number">2</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">1</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以看出 上游数据发射在 RxCachedThreadScheduler-1 中执行，也就是IO线程中执行，下游接收是在主线程main中</p><p><strong>示例2 使用两次 subscribeOn 和一次 observeOn：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (<span class="built_in">int</span> i =<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"发射线程："</span>+<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"----&gt;"</span>+<span class="string">"发射："</span>+i);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">1000</span>);</span><br><span class="line">            emitter.on<span class="constructor">Next(<span class="params">i</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.on<span class="constructor">Complete()</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe<span class="constructor">On(Schedulers.<span class="params">io</span>()</span>)</span><br><span class="line">    .map(integer -&gt; &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"处理线程："</span>+<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"----&gt;"</span>+<span class="string">"处理："</span>+integer);</span><br><span class="line">        return integer;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe<span class="constructor">On(Schedulers.<span class="params">newThread</span>()</span>)<span class="comment">//这次设置线程没起作用</span></span><br><span class="line">    .observe<span class="constructor">On(AndroidSchedulers.<span class="params">mainThread</span>()</span>)</span><br><span class="line">    .subscribe(integer -&gt;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收线程："</span>+<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"----&gt;"</span>+<span class="string">"接收："</span>+integer));</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">发射线程：R<span class="function"><span class="title">xCachedThreadScheduler</span>-1----&gt;</span>发射：<span class="number">1</span></span><br><span class="line">处理线程：R<span class="function"><span class="title">xCachedThreadScheduler</span>-1----&gt;</span>处理：<span class="number">1</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">1</span></span><br><span class="line">发射线程：R<span class="function"><span class="title">xCachedThreadScheduler</span>-1----&gt;</span>发射：<span class="number">2</span></span><br><span class="line">处理线程：R<span class="function"><span class="title">xCachedThreadScheduler</span>-1----&gt;</span>处理：<span class="number">2</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以看出 数据的接收是在主线程（main）中，但是发射和处理都在 RxCachedThreadScheduler-1 中执行，也就是IO线程中执行，而我们设置的 subscribeOn(Schedulers.newThread() 没起作用</p><p><strong>示例3使用一次 subscribeOn 和两次 observeOn：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (<span class="built_in">int</span> i =<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"发射线程："</span>+<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"----&gt;"</span>+<span class="string">"发射："</span>+i);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">1000</span>);</span><br><span class="line">            emitter.on<span class="constructor">Next(<span class="params">i</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.on<span class="constructor">Complete()</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe<span class="constructor">On(Schedulers.<span class="params">io</span>()</span>)</span><br><span class="line">    .observe<span class="constructor">On(Schedulers.<span class="params">newThread</span>()</span>)</span><br><span class="line">    .map(integer -&gt; &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"处理线程："</span>+<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"----&gt;"</span>+<span class="string">"处理："</span>+integer);</span><br><span class="line">        return integer;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observe<span class="constructor">On(AndroidSchedulers.<span class="params">mainThread</span>()</span>)</span><br><span class="line">    .subscribe(integer -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收线程："</span>+<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"----&gt;"</span>+<span class="string">"接收："</span>+integer)));</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">发射线程：R<span class="function"><span class="title">xCachedThreadScheduler</span>-1----&gt;</span>发射：<span class="number">1</span></span><br><span class="line">发射线程：R<span class="function"><span class="title">xCachedThreadScheduler</span>-1----&gt;</span>发射：<span class="number">2</span></span><br><span class="line">处理线程：R<span class="function"><span class="title">xNewThreadScheduler</span>-1----&gt;</span>处理：<span class="number">1</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">1</span></span><br><span class="line">处理线程：R<span class="function"><span class="title">xNewThreadScheduler</span>-1----&gt;</span>处理：<span class="number">2</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以看出发射线程在 RxCachedThreadScheduler-1 (IO线程) 中，数据的处理在 RxNewThreadScheduler-1 (也就是Schedulers.newThread())中，数据的接收在 主线程main中。说明 Observeon 每次设置都会起作用</p><p><strong>示例4：</strong><br><br>doOnSubscribe()/onSubscribe()，doOnNext()/onNext()，doOnComplete()/onComplete()，doOnError()/onError()</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">"当前线程----&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line"><span class="selector-tag">mDisposables</span><span class="selector-class">.add</span>(Observable</span><br><span class="line">        .create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void subscribe(<span class="variable">@NonNull</span> ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">"Observable线程----&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">                e.onNext(<span class="number">10</span>);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">// 从上面demo中可知 Observable 会在计算线程中执行</span></span><br><span class="line">        .subscribeOn(Schedulers.computation())</span><br><span class="line"><span class="comment">// 预测1：observeOn切换到线程，doOnSubscribe 在 NewThread-1 线程</span></span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void accept(<span class="variable">@NonNull</span> Disposable disposable) throws Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">"doOnSubscribe线程----&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">// 预测2：observeOn切换到线程，doOnNext 在 NewThread-2 线程</span></span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .doOnNext(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void accept(<span class="variable">@NonNull</span> Integer integer) throws Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">"doOnNext线程----&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">// 预测3：observeOn切换到线程，doOnComplete 在 NewThread-3 线程</span></span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .doOnComplete(new Action() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void run() throws Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">"doOnComplete线程----&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">// 预测4：observeOn切换到线程，subscribe 在 NewThread-4 线程</span></span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void accept(<span class="variable">@NonNull</span> Integer integer) throws Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">"subscribe线程----&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前线程----&gt;main</span><br><span class="line"><span class="function"><span class="title">doOnSubscribe</span>线程----&gt;</span>main</span><br><span class="line">O<span class="function"><span class="title">bservable</span>线程----&gt;</span>RxComputationThreadPool-<span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">doOnNext</span>线程----&gt;</span>RxNewThreadScheduler-<span class="number">2</span></span><br><span class="line"><span class="function"><span class="title">doOnComplete</span>线程----&gt;</span>RxNewThreadScheduler-<span class="number">3</span></span><br><span class="line"><span class="function"><span class="title">subscribe</span>线程----&gt;</span>RxNewThreadScheduler-<span class="number">4</span></span><br></pre></td></tr></table></figure><p>可以看出我们预测2/3/4点都正确，doOnNext()、doOnComplete()、subscribe都在指定的newThread中，但是预测1却在主线程，说明 observeOn() 不能切换doOnSubscribe()。</p><p>我们再做个这样的测试，把整段代码放在新的 Thread 中执行</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个Thread</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> <span class="constructor">Thread()</span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run<span class="literal">()</span> &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"当前线程----&gt;"</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">        mDisposables.add(Observable</span><br><span class="line">                .create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;<span class="literal">()</span> &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"Observable线程----&gt;"</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">                        e.on<span class="constructor">Next(10)</span>;</span><br><span class="line">                        e.on<span class="constructor">Complete()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe<span class="constructor">On(Schedulers.<span class="params">computation</span>()</span>)</span><br><span class="line">                .<span class="keyword">do</span><span class="constructor">OnSubscribe(<span class="params">new</span> Consumer&lt;Disposable&gt;()</span> &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(@NonNull Disposable disposable) throws Exception &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"doOnSubscribe线程----&gt;"</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observe<span class="constructor">On(Schedulers.<span class="params">newThread</span>()</span>)</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;<span class="literal">()</span> &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(@NonNull Integer integer) throws Exception &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"subscribe线程----&gt;"</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//启动线程</span></span><br><span class="line">thread.start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><p>输入日志：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前线程----&gt;Thread-<span class="number">282</span></span><br><span class="line"><span class="function"><span class="title">doOnSubscribe</span>线程----&gt;</span>Thread-<span class="number">282</span></span><br><span class="line">O<span class="function"><span class="title">bservable</span>线程----&gt;</span>RxComputationThreadPool-<span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">subscribe</span>线程----&gt;</span>RxNewThreadScheduler-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>看来doOnSubscribe比较特殊，它默认运行在执行该段代码的线程中，我们再用subscribeOn() 切换了线程试试：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预测1、observeOn切换到线程，doOnSubscribe 在 NewThread 线程，切换无效</span></span><br><span class="line"><span class="comment">// .observeOn(Schedulers.newThread())</span></span><br><span class="line"><span class="selector-class">.doOnSubscribe</span>(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void accept(<span class="variable">@NonNull</span> Disposable disposable) throws Exception &#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">"doOnSubscribe线程----&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//subscribeOn 切换线程，doOnSubscribe 会不会在 io 线程呢？</span></span><br><span class="line"><span class="selector-class">.subscribeOn</span>(Schedulers.io())</span><br></pre></td></tr></table></figure><p>输入日志：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前线程----&gt;main</span><br><span class="line"><span class="function"><span class="title">doOnSubscribe</span>线程----&gt;</span>RxCachedThreadScheduler-<span class="number">1</span></span><br><span class="line">O<span class="function"><span class="title">bservable</span>线程----&gt;</span>RxComputationThreadPool-<span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">doOnNext</span>线程----&gt;</span>RxNewThreadScheduler-<span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">doOnComplete</span>线程----&gt;</span>RxNewThreadScheduler-<span class="number">2</span></span><br><span class="line"><span class="function"><span class="title">subscribe</span>线程----&gt;</span>RxNewThreadScheduler-<span class="number">3</span></span><br></pre></td></tr></table></figure><p>我们看到用 subscribeOn(Schedulers.io()) 切换到了 IO 线程</p><p>对于 doOnNext()/onNext()，doOnComplete()/onComplete()，doOnError()/onError() 几个方法 (前者是 被观察者 调用的方法，后者是 观察者 接口里面的对应方法) ，可以通过 observeOn() 进行线程的切换。</p><p>而对于 doOnSubscribe()/onSubscribe() 方法 (前者是 被观察者 调用的方法，后者是 观察者 接口里面的对应方法) 来说，如果他后面有调用 subscribeOn() 切换线程，那么它运行在切换的线程，否则他默认运行在执行该段代码的线程中</p><p><strong>示例5 Schedulers.trampoline()：</strong></p><p>通过上面示例我们可以发现，Observer处理数据相比于Observable发射的数据存在滞后的现象，Observable发射了两个数据，Observer才处理了一个，并不是Observable每发射一个，Observer就处理一个。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"发射线程："</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">"----&gt;"</span> + <span class="string">"发射："</span> + i);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">1000</span>);</span><br><span class="line">            emitter.on<span class="constructor">Next(<span class="params">i</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.on<span class="constructor">Complete()</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe<span class="constructor">On(Schedulers.<span class="params">io</span>()</span>)</span><br><span class="line">    .observe<span class="constructor">On(Schedulers.<span class="params">trampoline</span>()</span>)</span><br><span class="line"><span class="comment">// .subscribeOn(Schedulers.trampoline())</span></span><br><span class="line"><span class="comment">// .observeOn(Schedulers.trampoline())</span></span><br><span class="line">    .subscribe(integer -&gt; &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收线程："</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">"----&gt;"</span> + <span class="string">"接收："</span> + integer);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发射线程：RxCachedThreadScheduler<span class="number">-1</span>----&gt;发射：<span class="number">1</span></span><br><span class="line">接收线程：RxCachedThreadScheduler<span class="number">-1</span>----&gt;接收：<span class="number">1</span></span><br><span class="line">发射线程：RxCachedThreadScheduler<span class="number">-1</span>----&gt;发射：<span class="number">2</span></span><br><span class="line">接收线程：RxCachedThreadScheduler<span class="number">-1</span>----&gt;接收：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以看到日志是按  发射-&gt;处理-&gt;接收 的顺序打印的，说明 Observable 在 Observer 将数据处理完之后才开始发射下一条。Schedulers.trampoline() 的作用 在<strong>当前线程</strong>（当前线程是IO线程）立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。</p><p>我们这样改下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="string">//</span> <span class="string">.subscribeOn</span><span class="params">(Schedulers.io()</span>)</span><br><span class="line">   <span class="string">//</span> <span class="string">.observeOn</span><span class="params">(Schedulers.trampoline()</span>)</span><br><span class="line"><span class="string">.subscribeOn</span><span class="params">(Schedulers.trampoline()</span>)</span><br><span class="line"><span class="string">.observeOn</span><span class="params">(Schedulers.trampoline()</span>)</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发射线程：<span class="function"><span class="title">main</span>----&gt;</span>发射：<span class="number">1</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">1</span></span><br><span class="line">发射线程：<span class="function"><span class="title">main</span>----&gt;</span>发射：<span class="number">2</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>我们都注释掉：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="string">//</span> <span class="string">.subscribeOn</span><span class="params">(Schedulers.io()</span>)</span><br><span class="line">   <span class="string">//</span> <span class="string">.observeOn</span><span class="params">(Schedulers.trampoline()</span>)</span><br><span class="line"><span class="string">//</span> <span class="string">.subscribeOn</span><span class="params">(Schedulers.trampoline()</span>)</span><br><span class="line"><span class="string">//</span> <span class="string">.observeOn</span><span class="params">(Schedulers.trampoline()</span>)</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发射线程：<span class="function"><span class="title">main</span>----&gt;</span>发射：<span class="number">1</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">1</span></span><br><span class="line">发射线程：<span class="function"><span class="title">main</span>----&gt;</span>发射：<span class="number">2</span></span><br><span class="line">接收线程：<span class="function"><span class="title">main</span>----&gt;</span>接收：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>和上面一样<br>说明 Schedulers.trampoline() 是作用当前主线程main上，相当于不指定线程。</p><p><strong>示例6 Schedulers.single()：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"发射线程："</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">"----&gt;"</span> + <span class="string">"发射："</span> + i);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">1000</span>);</span><br><span class="line">            emitter.on<span class="constructor">Next(<span class="params">i</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.on<span class="constructor">Complete()</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe<span class="constructor">On(Schedulers.<span class="params">single</span>()</span>)</span><br><span class="line">    .observe<span class="constructor">On(Schedulers.<span class="params">single</span>()</span>)</span><br><span class="line">    .map(integer -&gt; &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"处理线程："</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">"----&gt;"</span> + <span class="string">"处理："</span> + integer);</span><br><span class="line">        return integer;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observe<span class="constructor">On(Schedulers.<span class="params">single</span>()</span>)</span><br><span class="line">    .subscribe(integer -&gt; &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收线程："</span> + <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">"----&gt;"</span> + <span class="string">"接收："</span> + integer);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">发射线程：RxSingleScheduler<span class="number">-1</span>----&gt;发射：<span class="number">1</span></span><br><span class="line">发射线程：RxSingleScheduler<span class="number">-1</span>----&gt;发射：<span class="number">2</span></span><br><span class="line">处理线程：RxSingleScheduler<span class="number">-1</span>----&gt;处理：<span class="number">1</span></span><br><span class="line">处理线程：RxSingleScheduler<span class="number">-1</span>----&gt;处理：<span class="number">2</span></span><br><span class="line">接收线程：RxSingleScheduler<span class="number">-1</span>----&gt;接收：<span class="number">1</span></span><br><span class="line">接收线程：RxSingleScheduler<span class="number">-1</span>----&gt;接收：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>通过Schedulers.single()将数据的发射，处理，接收在Schedulers.single()的线程单例中排队执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行。</p><p><strong>下面举个完整的示例，需求是这样的：</strong></p><p>  （1）在io线程请求服务器数据；<br><br>  （2）请求之前需要在主线程显示 Loading dialog；<br><br>  （3）数据返回后在 computation() 处理；<br><br>  （4）处理完成后在 io() 存入数据库；<br><br>  （5）主线程 更新UI；<br></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create(<span class="literal">new</span> ObservableOnSubscribe&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="literal">void</span> subscribe(ObservableEmitter&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; emitter) throws Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">"IO线程----&gt;发起网络请求，请求服务器数据"</span>);</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 2019/8/23 请求网络</span></span><br><span class="line">            <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            for (int i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                <span class="built_in">list</span>.add(<span class="string">"数据"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">            emitter.onNext(<span class="built_in">list</span>);</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .doOnSubscribe(<span class="literal">new</span> Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="literal">void</span> accept(Disposable disposable) throws Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">"UI主线程----&gt;显示 Loading dialog"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .observeOn(Schedulers.computation())</span><br><span class="line">    .filter(<span class="literal">new</span> Predicate&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> test(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span>) throws Exception &#123;</span><br><span class="line">            <span class="comment">//list 从服务器请求的数据</span></span><br><span class="line">            System.out.println(<span class="string">"计算线程处理----&gt;处理数据"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observeOn(Schedulers.io())</span><br><span class="line">    .doOnNext(<span class="literal">new</span> Consumer&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="literal">void</span> accept(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; filterList) throws Exception &#123;</span><br><span class="line">            <span class="comment">//filterList 处理后的数据</span></span><br><span class="line">            System.out.println(<span class="string">"IO线程----&gt;存入数据库"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(<span class="literal">new</span> Consumer&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="literal">void</span> accept(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span>) throws Exception &#123;</span><br><span class="line">            <span class="comment">//str 处理之后的数据</span></span><br><span class="line">            System.out.println(<span class="string">"UI主线程----&gt;显示数据更新UI"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UI主线程<span class="comment">----&gt;显示 Loading dialog</span></span><br><span class="line">IO线程<span class="comment">----&gt;发起网络请求，请求服务器数据</span></span><br><span class="line">计算线程处理<span class="comment">----&gt;处理数据</span></span><br><span class="line">IO线程<span class="comment">----&gt;存入数据库</span></span><br><span class="line">UI主线程<span class="comment">----&gt;显示数据更新UI</span></span><br></pre></td></tr></table></figure><p>通过以上示例，我们可以总结subscribeOn和observeOn的用法如下:</p><p>subscribeOn 用来声明上游事件发送时的所在线程，若多次设定，上游会运行在 最早 的一次调用声明的线程中。<br><br>observeOn 指定下游操作所在的线程。若多次设定，每次均起作用。如若不指定下游线程，则默认在上游所在的线程中</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;首先了解 Schedulers 和 Scheduler 的概念&lt;br&gt;Scheduler 是负责执行任务的单元, 调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程，而 Schedulers 是创建各种 Scheduler 的工厂，Schedulers.io()等等都返回的是 Scheduler。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RxJava2" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/RxJava2/"/>
    
    
      <category term="Rxjava" scheme="http://www.wblog.work/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>【转】Java注解基础学习</title>
    <link href="http://www.wblog.work/annotation/"/>
    <id>http://www.wblog.work/annotation/</id>
    <published>2019-09-20T01:21:27.000Z</published>
    <updated>2019-09-27T02:13:56.325Z</updated>
    
    <content type="html"><![CDATA[<p>其实同class和interface一样，注解也属于一种类型。它是在Java SE 5.0版本中开始引入的概念。</p><a id="more"></a><h5 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h5><p>注解通过 @ interface 关键字进行定义。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="symbol">TestAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的形式跟接口很类似，不过前面加了@符号。 上面的代码就创建了一个名字为TestAnnotation的注解。</p><p>可以简单理解为创建了一张名字为TestAnnotation的标签</p><h5 id="注解的应用"><a href="#注解的应用" class="headerlink" title="注解的应用"></a>注解的应用</h5><p>上面创建了一个注解，那么注解怎么使用呢？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@TestAnnotation</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个类 Test，然后在类上面加上 @ TestAnnotation 就可以用。<br>你可以简单理解为将 TestAnnotation 这个张标签贴到Test这个类上面。</p><p>不过，想要注解能够正常工作，还需介绍一下 元注解。</p><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><p>元注解是可以注解到注解上的注解，或者说元注解是一种基本注解，但是它能够应用到其他的注解上面。</p><p>如果难于理解的话，可以这样理解。元注解就是一种标签，但是它是一张特殊的标签，<br>它的作用和目的就是给其他普通的标签进行解释说明的。</p><p>元注解有 @Retention、 @Documented、 @Target、 @Inherited、 @Repeatable 5种。</p><h6 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h6><p>Retention的英文意为保留期的意思。当@Retention 引用到一个注解上的时候，它解释了这个注解的存活时间。</p><p>源码如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public <span class="variable">@interface</span> Retention &#123;</span><br><span class="line">    <span class="selector-tag">RetentionPolicy</span> <span class="selector-tag">value</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码可以看出，其有一个属性value，返回一个枚举 RetentionPolicy 类型，有3种类型：</p><p>RetentionPolicy.SOURCE： 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽略。</p><p>RetentionPolicy.CLASS：注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</p><p>RetentionPolicy.RUNTIME：注解可以保留到程序运行的时候，它会被加载进入到JVM中，所以在程序运行时可以获取到它们。</p><p>我们可以通过这样的方式类加深理解，@Retention 去给一张标签解释的时候，它指定了这张标签的时间。@Retention相当于给一张标签上面盖了一张时间戳，时间戳指明了标签张贴的时间周期。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> TestAnnotation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，我们指定了TestAnnotation 可以在程序运行周期被获取到，因次它的生命周期非常长。</p><h6 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h6><p>顾名思义，这个元注解肯定和文档有关。它的作用是能够将注解中的元素包含到Javadoc中取。</p><h6 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h6><p>Target是目标的意思，@Target指定了注解运用的地方。也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public <span class="variable">@interface</span> Target &#123;</span><br><span class="line">    <span class="selector-tag">ElementType</span><span class="selector-attr">[]</span> <span class="selector-tag">value</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看出，其有一个属性value，返回一个枚举 ElementType 类型的数组，这个数组的值就代表了可以在那些场景。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> &#123;</span></span><br><span class="line">    /** 允许被修饰的注解作用在类、接口和枚举上 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    TYPE,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span>** 允许作用在属性字段上，包括<span class="class"><span class="keyword">enum</span>实例 */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    /** 允许作用在方法上 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    METHOD,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span>** 允许作用在方法参数上 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    PARAMETER,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span>** 允许作用在构造器上 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    CONSTRUCTOR,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span>** 允许作用在局部变量上 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    LOCAL_VARIABLE,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span>** 允许作用在注解上(应用于另一个注解上) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    ANNOTATION_TYPE,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span>** 允许作用在包上 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    PACKAGE,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span>**</span><br><span class="line">     * 允许作用在类型参数声明（<span class="number">1.8</span>新加入）</span><br><span class="line">     *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    TYPE_PARAMETER,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span>**</span><br><span class="line">     * 允许作用在类型使用声明（<span class="number">1.8</span>新加入)</span><br><span class="line">     *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    TYPE_USE</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>例如 @Override 注解使用了@Target(ElementType.METHOD)，意味着，它只能注解方法，不能注解属性或者类，或者其他情况。<br>当未指定Target值时，则可以用于任何元素上，多个值则使用{}包含并用 “,”隔开，比如：<br><code>@Target(value={CONSTRUCTOR,FIELD,METHOD}</code><br>该注解既可注解构造方法、字段和方法。</p><h6 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h6><p>Inherited是继承的意思，其让被修饰的注解拥有被继承的能力。</p><p>一个被@Inherited注解了的注解 修饰了一个父类，如果他的子类没有被其他注解修饰，则他的子类也继承了父类的注解。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 自定义注解*/</span></span><br><span class="line">@Inherited</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="symbol">TestAnnotation</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 父类标注 自定义注解 */</span></span><br><span class="line">@TestAnnotation</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 子类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Son</span> <span class="symbol">extentx</span> <span class="symbol">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 测试子类获取父类自定义注解*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line"><span class="comment">//获取Son的class对象</span></span><br><span class="line">Class&lt;Son&gt; sonClass = Son.class;</span><br><span class="line"><span class="comment">//获取Son类上的注解TestAnnotation可以执行成功</span></span><br><span class="line">TestAnnotation annotation = sonClass.getAnnotation(TestAnnotation.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解TestAnnotation被@Inherited修饰，之后类Father被TestAnnotation注解，类Son继承了Father类，类Son也就拥有TestAnnotation这个注解。</p><p>可以这样理解：</p><p>老子非常有钱，所以人们给他贴了一张标签叫做富豪。</p><p>老子的儿子长大后，只要没和老子断绝父子关系，虽然别人没给他贴富豪的标签，但他自然也是富豪。</p><p>老子的孙子长大后，自然也是富豪。</p><p>这就是人们口中戏称的富一代，富二代，富三代。虽然叫法不同，好像好多个标签，但其实事情的本质也就是他们有一张共同的标签，也就是老子身上的那张富豪的标签。</p><h6 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h6><p>Repeatable是可重复的意思，@Repeatable是Java1.8才加进来的，所有算是一个新的特效。</p><p>别这个元注解修饰的注解 可以多次修饰同一个对象，但是每次注解又代表不同的含义。<br>比如：一个人既是程序员，又是成品经理，同时也是画家</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 定义一个容器注解*</span>/</span></span></span><br><span class="line"><span class="meta">@interface</span> Persons&#123;</span><br><span class="line">Person[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 被Repeatable修饰的注解 *</span>/</span></span></span><br><span class="line"><span class="meta">@Repeatable</span>(Persons.<span class="keyword">class</span>)</span><br><span class="line"><span class="meta">@interface</span> Person&#123;</span><br><span class="line"><span class="built_in">String</span> role() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Person</span>(role=<span class="string">"artist"</span>)</span><br><span class="line"><span class="meta">@Person</span>(role=<span class="string">"coder"</span>)</span><br><span class="line"><span class="meta">@Person</span>(role=<span class="string">"PM"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码@Repeatable注解了Person。而@Repeatable后面括号中的类相当于一个容器注解。</p><p>什么是容器注解呢？就是存放其他注解的地方。他本身也是一个注解。</p><p>容器注解，他里面必须要有一个value的属性，注意它是数组。</p><p>如果不好理解的话，可以这样理解。Persons 是一张总的标签，上面贴满了Person这种类型但内容不一样的标签。把Person给SuperMan贴上，相当于同时给他贴上了程序员、产品经理、画家的标签。</p><p>我们可能对于@Person(role=”PM”) 括号里的内容感兴趣，他其实就是Person这个注解的role属性赋值为PM。</p><h5 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h5><p>注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。</p><p>注解本质上就是一个Annotation接口</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Annotatioin 接口源码*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Annotation</span>&#123;</span><br><span class="line"></span><br><span class="line">boolean <span class="keyword">equals</span>（Object obj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">toString</span>(<span class="params"></span>)</span>;</span><br><span class="line"> </span><br><span class="line">Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上源码，我们知道注解本身就是Annotation接口的子接口，也就是说注解其实可以有属性和方法，但是接口的数据都是static final的，对于注解来说没有什么意义，而我们定义的接口方法就相当于是注解的属性，也就对应了前面所说的为什么注解只有属性成员变量，其实他就是接口的方法，这就为什么成员变量会有方法，不同于接口的是我们可以在注解的括号中给成员变量赋值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentioniPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation&#123;</span><br><span class="line">String name() <span class="keyword">default</span> <span class="string">"zk"</span>;</span><br><span class="line">int age() <span class="keyword">default</span> <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@TestAnnotation(name=<span class="meta-string">"zhangke"</span>,age=<span class="meta-string">"25"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码定义了TestAnnotation 这个注解拥有name和age两个属性。用default 指定默认值。如果有default设置了默认值时，也可以无需在TestAnnotation后面的括号中进行赋值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赋值的方式就是在注解的括号中用“,”隔开分别给对应的属性赋值。<br>如果注解的只有一个属性时，可以直接把属性值写到括号中。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="variable">@Retention</span>(RetentioniPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> TestAnnotation&#123;</span><br><span class="line"><span class="selector-tag">String</span> <span class="selector-tag">name</span>();</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">TestAnnotation</span>(zhangke)</span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">Person</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，在注解中定义属性时有一下几种的类型：<br>1、基本数据类型<br>2、String<br>3、枚举<br>4、注解<br>5、类、接口<br>6、以上类型的一维数组类型</p><h5 id="Java-内置的注解"><a href="#Java-内置的注解" class="headerlink" title="Java 内置的注解"></a>Java 内置的注解</h5><p>Java内置的直接共有5个<br>@Override：<br>这个大家很熟悉了，让编译器检查被标记的方法，保证其重写了父类的某一个方法。此注解只能标记方法。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line">public <span class="variable">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Deprecated：<br>标记某些程序元素已经过时，程序员请不要再使用了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Target</span>(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="line">public <span class="variable">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SuppressWarnings：<br>阻止警告的意思。调用了被@Deprecated注解后的方法，编译器会警告提醒，但是开发者不想看到这些警告，可以使用@SuppressWarnings达到目的</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line">public <span class="variable">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    <span class="selector-tag">String</span><span class="selector-attr">[]</span> <span class="selector-tag">value</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其内部有个String数组类型的属性，根据传入的值来取消相应的警告：<br>deprecation：使用了不赞成使用的类或方法时的警告；<br>unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型;<br>fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;<br>path：在类路径、源文件路径等中有不存在的路径时的警告;<br>serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告;<br>finally：任何 finally 子句不能正常完成时的警告;<br>all：关于以上所有情况的警告</p><p>@SafeVarargs(Java7 新增)：<br>@SuppressWarnings可以用在各种需要取消警告的地方，而 @SafeVarargs主要用在取消参数的警告。就是说编译器如果检查到你对方法参数的操作，有可能发生问题时会给出警告，但是你很自（任）性，老子不要警告，于是你就加上了这个标签。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD&#125;)</span><br><span class="line">public <span class="variable">@interface</span> SafeVarargs &#123;&#125;</span><br></pre></td></tr></table></figure><p>@FunctionalInterface(Java8 新增)：<br>标记型注解，告诉编译器检查被标注的接口是否是一个函数接口，即检查这个接口是否只包含一个抽象方法，只有函数接口才可以使用Lambda表达式创建实例。</p><h5 id="如何使用注解"><a href="#如何使用注解" class="headerlink" title="如何使用注解"></a>如何使用注解</h5><p>前面我们学习了注解的基本语法，那注解具体怎么使用呢？<br>这时候就需要用到APT（Annotation Processing Tool），访问和处理Annotation的工具，那么APT是具体怎么读取注解的属性信息的呢，那就是反射。<br>Annotation接口是所有注解的父接口（需要通过发编译查看），在java.lang.reflect发射包下存在一个叫AnnotationElement的接口，其表示程序中可以接受注解的程序元素，比如类，方法，字段，构造方法，包等等。而Java为使用反射的主要类实现了此接口，如Class类、Field类、Method类、Constructor类等。</p><p>当我们通过反射技术获取到反射包内的那些类型的实例后，就可以通过AnnotationElement接口的API方法来获取注解信息了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**是否存在对应 Annotation 对象*/</span><br><span class="line"> public boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass) &#123;</span><br><span class="line">       return GenericDeclaration.super.isAnnotationPresent(annotationClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**获取 Annotation 对象*/</span><br><span class="line">   public &lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationClass) &#123;</span><br><span class="line">       <span class="attribute">Objects.requireNonNull(annotationClass);</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">       return (A) annotationData().annotations.get(annotationClass);</span><br><span class="line">   &#125;</span><br><span class="line">/**获取所有 Annotation 对象数组*/   </span><br><span class="line">public Annotation[] getAnnotations() &#123;</span><br><span class="line">       return AnnotationParser.toArray(annotationData().annotations);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>下面结合前面的例子，我们来获取下注解的属性，在获取之前我们自定义的注解必须使用元注解@Retention(RetentionPolicy.RUNTIME)。</p><p>待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实同class和interface一样，注解也属于一种类型。它是在Java SE 5.0版本中开始引入的概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="反射和注解" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/Java/%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    
    
      <category term="注解" scheme="http://www.wblog.work/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>【转】java反射基础学习（附demo）</title>
    <link href="http://www.wblog.work/reflection/"/>
    <id>http://www.wblog.work/reflection/</id>
    <published>2019-09-20T01:21:27.000Z</published>
    <updated>2019-09-27T02:11:16.992Z</updated>
    
    <content type="html"><![CDATA[<p>Java 反射机制是在<strong>运行状态</strong>中，对于任意一个类，都能够知道这个类的所有的属性和方法；对于任意一个对象，都能够调用它的任何方法和属性；</p><a id="more"></a><p>也就是说反射机制在程序运行的过程中，能够获取任何已知名称的类的内部信息，并在执行过程中，动态生成对象实体、对fields设值、或者调用methods。</p><p>这种在程序运行过程中，动态获取类的信息以及动态调用方法的功能称为Java的反射机制。</p><h4 id="Reflection-API-简介"><a href="#Reflection-API-简介" class="headerlink" title="Reflection API 简介"></a>Reflection API 简介</h4><p>在JDK中，主要由一下类来实现Java反射机制，这些类（出来Class）都位于java.lang.reflect包中。</p><table><thead><tr><th>类名</th><th>含义</th></tr></thead><tbody><tr><td>Class 类</td><td>代表某个具体的类和接口，位于java.lang包下</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method类</td><td>代表类或者接口上的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr><tr><td>Array类</td><td>提供了动态创建数组，以及访问数组的元素的静态方法</td></tr></tbody></table><h5 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h5><p>Class本身就是一个类，Class是该类的名称，注意不要理解成类类型。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">MyTest</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>注意上面的class的首字母是小写的，他表示一中类类型，但是Class是一个类，相当于上面定义的MyTest类。</p><p>在Java中，每个class都有一个相应的Class对象，也就是说，当我们编写一个类，编译成.class文件后，就会产生一个Class对象，用于表达这个类的类型信息。无论某个类有多少个对象，这些对象都会对应同一个Class对象。</p><p>Class的获取方式：</p><ul><li><p>使用Class类的静态方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; testClazz01 = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"com.zwb.MyTest"</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用类的.class</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> <span class="title">MyTest</span>&gt; <span class="title">testClazz02</span> = <span class="title">MyTest</span>.<span class="title">class</span>;</span></span><br></pre></td></tr></table></figure></li><li><p>使用对象的getClass()方法</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyTest myTest = <span class="keyword">new</span> MyTest();</span><br><span class="line"><span class="class"><span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> <span class="title">MyTest</span>&gt; <span class="title">testClazz03</span> = <span class="title">myTest</span>.<span class="title">getClass</span>();</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Class相关的方法"><a href="#Class相关的方法" class="headerlink" title="Class相关的方法"></a>Class相关的方法</h5><ul><li>获得<strong>类相关</strong>的方法</li></ul><table><thead><tr><th>方法名</th><th>含义</th></tr></thead><tbody><tr><td>asSubClass(Class<u> clazz)</u></td><td>把传递的类的对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或者接口的对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，数组中包含该类中所有具有public属性的类和接口类的对象</td></tr><tr><td>getDeclaredClasses()</td><td>返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td>forName(String className)</td><td>根据类名返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstance()</td><td>创建类的实例</td></tr><tr><td>getPackage</td><td>获取类的包</td></tr><tr><td>getSimpleName</td><td>获取类的名字</td></tr><tr><td>getSuperclass</td><td>获取父类的名字</td></tr><tr><td>getInterfaces</td><td>获取当前类实现的接口</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li>获得类中<strong>构造器</strong>相关的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td>getConstructors()</td><td>获得该类的所有公有构造方法</td></tr><tr><td>getDeclaredConstructors(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的构造方法</td></tr><tr><td>getDeclaredConstructors()</td><td>获得该类所有构造方法</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li>获得类中<strong>方法</strong>相关的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>根据方法名和参数，返回一个具体的具有public属性的方法</td></tr><tr><td>getMethods()</td><td>返回所有具有public属性的方法数组（包括从父类继承的public方法和实现接口的public方法）</td></tr><tr><td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>根据方法名和参数，返回一个具体的方法（不分public和非public属性）</td></tr><tr><td>getDeclaredMethods()</td><td>返回该类中的所有的方法数组（不分public和非public属性）</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li>获得类中<strong>属性</strong>相关的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getField(String name)</td><td>根据变量名，返回一个具体的具有public属性的成员变量</td></tr><tr><td>getFields()</td><td>返回具有public属性的成员变量的数组</td></tr><tr><td>getDeclaredField(String name)</td><td>根据变量名，返回一个成员变量（不分public和非public属性）</td></tr><tr><td>getDeclaredFields()</td><td>返回所有成员变量组成的数组（不分public和非public属性）</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li>获得类中<strong>注解</strong>相关的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getAnnotation(Class<t>  annotationClass)</t></td><td>返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td>getAnnotations()</td><td>返回该类所有的公有注解对象</td></tr><tr><td>getDeclaredAnnotation(Class<t>  annotationClass)</t></td><td>返回该类中与参数类型匹配的<strong>直接修饰的</strong>所有注解对象</td></tr><tr><td>getDeclaredAnnotations()</td><td>返回该类所有的<strong>直接修饰的</strong>注解对象</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li><p>其他重要的方法</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>isAnnotation()</td><td>判断是否是注解</td></tr><tr><td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td><td>判断是否是指定类型的注解</td></tr><tr><td>isAnonymousClass()</td><td>判断是否是匿名类</td></tr><tr><td>isArray()</td><td>判断是否是数组类</td></tr><tr><td>isEnum()</td><td>判断是否是枚举类</td></tr><tr><td>isInstance(Object obj)</td><td>判断obj是否是该类的实例</td></tr><tr><td>isInterface()</td><td>判断是否是接口类</td></tr></tbody></table></li></ul><h5 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h5><p>Field代表类的成员变量（属性）</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>get(Object obj)</td><td>获取obj对应的属性值</td></tr><tr><td>set(Object obj,Object value)</td><td>设置obj对应的属性值</td></tr><tr><td>equals(Object obj)</td><td>判断与obj是否相等</td></tr></tbody></table><h5 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h5><p>Method代表类的方法</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>invoke(Object receiver,Object… args)</td><td>传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><p>参数receiver指明了调用对象，参数args指明该方法所需要接收的参数。由于是运行时动态的调用类的方法，无法提前知道参数类型和返回值，所以传入和返回的都是Object<br>比如：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyTest&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="built_in">int</span> test<span class="constructor">Invoke(<span class="params">int</span> <span class="params">i</span>)</span>&#123;</span><br><span class="line">return i*<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt; classTest = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"com.zwb.MyTest"</span>)</span>;</span><br><span class="line">Method methodTest = <span class="module-access"><span class="module"><span class="identifier">MyTest</span>.</span></span>get<span class="constructor">DeclaredMethod(<span class="string">"testInvoke"</span>,<span class="params">int</span>.<span class="params">class</span>)</span>;</span><br><span class="line">methodTest.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;</span><br><span class="line">Object objectTest = classTest.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line"><span class="built_in">int</span> result = (<span class="built_in">int</span>) methodTest.invoke(objectTest,<span class="number">1</span>);</span><br><span class="line"><span class="comment">// result=10</span></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>这里主要是学习反射最基础的语法和相关的API，一些深层的知识点请自行查阅资料。<br>以上都是参考别人总结的（绝不是copy，都是在理解的基础上一字一句自己敲的），示例是我根据相关的API自己敲的，古人云：眼过千遍不如手过一遍。<br>如对原文作者又冒犯之处，请及时联系立删</p><p>参考：<br><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">https://www.jianshu.com/p/9be58ee20dee</a><br><a href="https://www.cnblogs.com/crazypebble/archive/2011/04/13/2014582.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazypebble/archive/2011/04/13/2014582.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 反射机制是在&lt;strong&gt;运行状态&lt;/strong&gt;中，对于任意一个类，都能够知道这个类的所有的属性和方法；对于任意一个对象，都能够调用它的任何方法和属性；&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
      <category term="反射和注解" scheme="http://www.wblog.work/categories/%E6%8A%80%E6%9C%AF/Java/%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    
    
      <category term="反射" scheme="http://www.wblog.work/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
</feed>

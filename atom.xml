<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wenbing-blog</title>
  
  <subtitle>明天会更好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wblog.work/"/>
  <updated>2019-09-25T03:07:19.129Z</updated>
  <id>http://wblog.work/</id>
  
  <author>
    <name>gs-wenbing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rxjava - RxScheduler示例和详细解析</title>
    <link href="http://wblog.work/rxjava-schedul/"/>
    <id>http://wblog.work/rxjava-schedul/</id>
    <published>2019-09-25T03:21:27.000Z</published>
    <updated>2019-09-25T03:07:19.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>首先了解 Schedulers 和 Scheduler 的概念<br></p><p><strong>Scheduler 是负责执行任务的单元, 调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程<br><br>而 Schedulers 是创建各种 Scheduler 的工厂，Schedulers.io()等等都返回的是 Scheduler<br><br>我们可以使用使用 subscribeOn() 和 observeOn() 两个方法来对线程进行控制。</strong></p><p>比如常用的 Observable 生成发射数据流，以及 Operators 加工数据流都是在后台线程中进行，而 Observer 在前台线程中接受并相应数据。</p><h5 id="subscribeOn-和-observeOn"><a href="#subscribeOn-和-observeOn" class="headerlink" title="subscribeOn() 和 observeOn()"></a>subscribeOn() 和 observeOn()</h5><ul><li><p>subscribeOn(): 指定 ObservableOnSubscribe#subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程，我把他叫做上游。<br><br>当调用多次 subscribeOn() 时，事件产生会运行在最早的一次调用声明的线程中。当然也不是说多次的调用是完全没效果的，后面会提到。</p></li><li><p>observeOn(): 指定 Observer 所运行在的线程。或者叫做事件消费的线程，我把他叫做下游。每次调用 observeOn() 都会发生线程切换，此次调用直到下次切换线程中间的过程中的操作运行在此次调用指定的线程中。</p></li></ul><h5 id="RxJava-提供了以下这些调度器："><a href="#RxJava-提供了以下这些调度器：" class="headerlink" title="RxJava 提供了以下这些调度器："></a>RxJava 提供了以下这些调度器：</h5><ul><li><p>Schedulers.single();<br><br>运行在一个单独的线程，顺序执行，先进先出</p></li><li><p>Schedulers.computation();<br><br>计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算；<br>默认线程数等于处理器的数量。 不要执行阻塞、IO操作(IO操作请使用Schedulers.io())</p></li><li><p>Schedulers.io();<br><br>I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程</p></li><li><p>Schedulers.trampoline();<br><br>在当前线程立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行</p></li><li><p>Schedulers.newThread();<br><br>总是启用新线程，并在新线程执行操作</p></li><li><p>Schedulers.from(@NonNull Executor executor);<br><br>使用指定的 Executor 作为调度器</p></li><li><p>AndroidSchedulers.mainThread();<br><br>它指定的操作将在 Android 主线程运行</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3></li></ul><p>以下示例部分参考：<a href="https://www.jianshu.com/p/12638513424f" target="_blank" rel="noopener">https://www.jianshu.com/p/12638513424f</a>   <br><br>自己再敲一遍，有助于更深层的理解</p><p><strong>示例1 使用一次subscribeOn和一次observeOn：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (int i =1;i&lt;3;i++)&#123;</span><br><span class="line">            System.out.println(&quot;发射线程：&quot;+Thread.currentThread().getName()+&quot;----&gt;&quot;+&quot;发射：&quot;+i);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(integer -&gt; System.out.println(&quot;接收线程：&quot;+Thread.currentThread().getName()+&quot;----&gt;&quot;+&quot;接收：&quot;+integer)));</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发射线程：RxCachedThreadScheduler-1----&gt;发射：1</span><br><span class="line">发射线程：RxCachedThreadScheduler-1----&gt;发射：2</span><br><span class="line">接收线程：main----&gt;接收：1</span><br><span class="line">接收线程：main----&gt;接收：2</span><br></pre></td></tr></table></figure><p>可以看出 上游数据发射在 RxCachedThreadScheduler-1 中执行，也就是IO线程中执行，下游接收是在主线程main中</p><p><strong>示例2 使用两次 subscribeOn 和一次 observeOn：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (int i =1;i&lt;3;i++)&#123;</span><br><span class="line">            System.out.println(&quot;发射线程：&quot;+Thread.currentThread().getName()+&quot;----&gt;&quot;+&quot;发射：&quot;+i);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .map(integer -&gt; &#123;</span><br><span class="line">        System.out.println(&quot;处理线程：&quot;+Thread.currentThread().getName()+&quot;----&gt;&quot;+&quot;处理：&quot;+integer);</span><br><span class="line">        return integer;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.newThread())//这次设置线程没起作用</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(integer -&gt;</span><br><span class="line">            System.out.println(&quot;接收线程：&quot;+Thread.currentThread().getName()+&quot;----&gt;&quot;+&quot;接收：&quot;+integer));</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">发射线程：RxCachedThreadScheduler-1----&gt;发射：1</span><br><span class="line">处理线程：RxCachedThreadScheduler-1----&gt;处理：1</span><br><span class="line">接收线程：main----&gt;接收：1</span><br><span class="line">发射线程：RxCachedThreadScheduler-1----&gt;发射：2</span><br><span class="line">处理线程：RxCachedThreadScheduler-1----&gt;处理：2</span><br><span class="line">接收线程：main----&gt;接收：2</span><br></pre></td></tr></table></figure><p>可以看出 数据的接收是在主线程（main）中，但是发射和处理都在 RxCachedThreadScheduler-1 中执行，也就是IO线程中执行，而我们设置的 subscribeOn(Schedulers.newThread() 没起作用</p><p><strong>示例3使用一次 subscribeOn 和两次 observeOn：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (int i =1;i&lt;3;i++)&#123;</span><br><span class="line">            System.out.println(&quot;发射线程：&quot;+Thread.currentThread().getName()+&quot;----&gt;&quot;+&quot;发射：&quot;+i);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(Schedulers.newThread())</span><br><span class="line">    .map(integer -&gt; &#123;</span><br><span class="line">        System.out.println(&quot;处理线程：&quot;+Thread.currentThread().getName()+&quot;----&gt;&quot;+&quot;处理：&quot;+integer);</span><br><span class="line">        return integer;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(integer -&gt; System.out.println(&quot;接收线程：&quot;+Thread.currentThread().getName()+&quot;----&gt;&quot;+&quot;接收：&quot;+integer)));</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">发射线程：RxCachedThreadScheduler-1----&gt;发射：1</span><br><span class="line">发射线程：RxCachedThreadScheduler-1----&gt;发射：2</span><br><span class="line">处理线程：RxNewThreadScheduler-1----&gt;处理：1</span><br><span class="line">接收线程：main----&gt;接收：1</span><br><span class="line">处理线程：RxNewThreadScheduler-1----&gt;处理：2</span><br><span class="line">接收线程：main----&gt;接收：2</span><br></pre></td></tr></table></figure><p>可以看出发射线程在 RxCachedThreadScheduler-1 (IO线程) 中，数据的处理在 RxNewThreadScheduler-1 (也就是Schedulers.newThread())中，数据的接收在 主线程main中。说明 Observeon 每次设置都会起作用</p><p><strong>示例4：</strong><br><br>doOnSubscribe()/onSubscribe()，doOnNext()/onNext()，doOnComplete()/onComplete()，doOnError()/onError()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;当前线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">mDisposables.add(Observable</span><br><span class="line">        .create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;Observable线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">                e.onNext(10);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">// 从上面demo中可知 Observable 会在计算线程中执行</span><br><span class="line">        .subscribeOn(Schedulers.computation())</span><br><span class="line">// 预测1：observeOn切换到线程，doOnSubscribe 在 NewThread-1 线程</span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(@NonNull Disposable disposable) throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;doOnSubscribe线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">// 预测2：observeOn切换到线程，doOnNext 在 NewThread-2 线程</span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .doOnNext(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(@NonNull Integer integer) throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;doOnNext线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">// 预测3：observeOn切换到线程，doOnComplete 在 NewThread-3 线程</span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .doOnComplete(new Action() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;doOnComplete线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">// 预测4：observeOn切换到线程，subscribe 在 NewThread-4 线程</span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(@NonNull Integer integer) throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;subscribe线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前线程----&gt;main</span><br><span class="line">doOnSubscribe线程----&gt;main</span><br><span class="line">Observable线程----&gt;RxComputationThreadPool-1</span><br><span class="line">doOnNext线程----&gt;RxNewThreadScheduler-2</span><br><span class="line">doOnComplete线程----&gt;RxNewThreadScheduler-3</span><br><span class="line">subscribe线程----&gt;RxNewThreadScheduler-4</span><br></pre></td></tr></table></figure><p>可以看出我们预测2/3/4点都正确，doOnNext()、doOnComplete()、subscribe都在指定的newThread中，但是预测1却在主线程，说明 observeOn() 不能切换doOnSubscribe()。</p><p>我们再做个这样的测试，把整段代码放在新的 Thread 中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//新建一个Thread</span><br><span class="line">Thread thread = new Thread()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;当前线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">        mDisposables.add(Observable</span><br><span class="line">                .create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                        System.out.println(&quot;Observable线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">                        e.onNext(10);</span><br><span class="line">                        e.onComplete();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribeOn(Schedulers.computation())</span><br><span class="line">                .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(@NonNull Disposable disposable) throws Exception &#123;</span><br><span class="line">                        System.out.println(&quot;doOnSubscribe线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(Schedulers.newThread())</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(@NonNull Integer integer) throws Exception &#123;</span><br><span class="line">                        System.out.println(&quot;subscribe线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//启动线程</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><p>输入日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前线程----&gt;Thread-282</span><br><span class="line">doOnSubscribe线程----&gt;Thread-282</span><br><span class="line">Observable线程----&gt;RxComputationThreadPool-1</span><br><span class="line">subscribe线程----&gt;RxNewThreadScheduler-1</span><br></pre></td></tr></table></figure><p>看来doOnSubscribe比较特殊，它默认运行在执行该段代码的线程中，我们再用subscribeOn() 切换了线程试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 预测1、observeOn切换到线程，doOnSubscribe 在 NewThread 线程，切换无效</span><br><span class="line">// .observeOn(Schedulers.newThread())</span><br><span class="line">.doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(@NonNull Disposable disposable) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;doOnSubscribe线程----&gt;&quot; + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//subscribeOn 切换线程，doOnSubscribe 会不会在 io 线程呢？</span><br><span class="line">.subscribeOn(Schedulers.io())</span><br></pre></td></tr></table></figure><p>输入日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前线程----&gt;main</span><br><span class="line">doOnSubscribe线程----&gt;RxCachedThreadScheduler-1</span><br><span class="line">Observable线程----&gt;RxComputationThreadPool-1</span><br><span class="line">doOnNext线程----&gt;RxNewThreadScheduler-1</span><br><span class="line">doOnComplete线程----&gt;RxNewThreadScheduler-2</span><br><span class="line">subscribe线程----&gt;RxNewThreadScheduler-3</span><br></pre></td></tr></table></figure><p>我们看到用 subscribeOn(Schedulers.io()) 切换到了 IO 线程</p><p>对于 doOnNext()/onNext()，doOnComplete()/onComplete()，doOnError()/onError() 几个方法 (前者是 被观察者 调用的方法，后者是 观察者 接口里面的对应方法) ，可以通过 observeOn() 进行线程的切换。</p><p>而对于 doOnSubscribe()/onSubscribe() 方法 (前者是 被观察者 调用的方法，后者是 观察者 接口里面的对应方法) 来说，如果他后面有调用 subscribeOn() 切换线程，那么它运行在切换的线程，否则他默认运行在执行该段代码的线程中</p><p><strong>示例5 Schedulers.trampoline()：</strong></p><p>通过上面示例我们可以发现，Observer处理数据相比于Observable发射的数据存在滞后的现象，Observable发射了两个数据，Observer才处理了一个，并不是Observable每发射一个，Observer就处理一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (int i = 1; i &lt; 3; i++) &#123;</span><br><span class="line">            System.out.println(&quot;发射线程：&quot; + Thread.currentThread().getName() + &quot;----&gt;&quot; + &quot;发射：&quot; + i);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(Schedulers.trampoline())</span><br><span class="line">// .subscribeOn(Schedulers.trampoline())</span><br><span class="line">// .observeOn(Schedulers.trampoline())</span><br><span class="line">    .subscribe(integer -&gt; &#123;</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">        System.out.println(&quot;接收线程：&quot; + Thread.currentThread().getName() + &quot;----&gt;&quot; + &quot;接收：&quot; + integer);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发射线程：RxCachedThreadScheduler-1----&gt;发射：1</span><br><span class="line">接收线程：RxCachedThreadScheduler-1----&gt;接收：1</span><br><span class="line">发射线程：RxCachedThreadScheduler-1----&gt;发射：2</span><br><span class="line">接收线程：RxCachedThreadScheduler-1----&gt;接收：2</span><br></pre></td></tr></table></figure><p>可以看到日志是按  发射-&gt;处理-&gt;接收 的顺序打印的，说明 Observable 在 Observer 将数据处理完之后才开始发射下一条。Schedulers.trampoline() 的作用 在<strong>当前线程</strong>（当前线程是IO线程）立即执行任务，如果当前线程有任务在执行，则会将其暂停，等插入进来的任务执行完之后，再将未完成的任务接着执行。</p><p>我们这样改下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   // .subscribeOn(Schedulers.io())</span><br><span class="line">   // .observeOn(Schedulers.trampoline())</span><br><span class="line">.subscribeOn(Schedulers.trampoline())</span><br><span class="line">.observeOn(Schedulers.trampoline())</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发射线程：main----&gt;发射：1</span><br><span class="line">接收线程：main----&gt;接收：1</span><br><span class="line">发射线程：main----&gt;发射：2</span><br><span class="line">接收线程：main----&gt;接收：2</span><br></pre></td></tr></table></figure><p>我们都注释掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   // .subscribeOn(Schedulers.io())</span><br><span class="line">   // .observeOn(Schedulers.trampoline())</span><br><span class="line">// .subscribeOn(Schedulers.trampoline())</span><br><span class="line">// .observeOn(Schedulers.trampoline())</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发射线程：main----&gt;发射：1</span><br><span class="line">接收线程：main----&gt;接收：1</span><br><span class="line">发射线程：main----&gt;发射：2</span><br><span class="line">接收线程：main----&gt;接收：2</span><br></pre></td></tr></table></figure><p>和上面一样<br>说明 Schedulers.trampoline() 是作用当前主线程main上，相当于不指定线程。</p><p><strong>示例6 Schedulers.single()：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create((ObservableOnSubscribe&lt;Integer&gt;) emitter -&gt; &#123;</span><br><span class="line">        for (int i = 1; i &lt; 3; i++) &#123;</span><br><span class="line">            System.out.println(&quot;发射线程：&quot; + Thread.currentThread().getName() + &quot;----&gt;&quot; + &quot;发射：&quot; + i);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.single())</span><br><span class="line">    .observeOn(Schedulers.single())</span><br><span class="line">    .map(integer -&gt; &#123;</span><br><span class="line">        System.out.println(&quot;处理线程：&quot; + Thread.currentThread().getName() + &quot;----&gt;&quot; + &quot;处理：&quot; + integer);</span><br><span class="line">        return integer;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observeOn(Schedulers.single())</span><br><span class="line">    .subscribe(integer -&gt; &#123;</span><br><span class="line">        System.out.println(&quot;接收线程：&quot; + Thread.currentThread().getName() + &quot;----&gt;&quot; + &quot;接收：&quot; + integer);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">发射线程：RxSingleScheduler-1----&gt;发射：1</span><br><span class="line">发射线程：RxSingleScheduler-1----&gt;发射：2</span><br><span class="line">处理线程：RxSingleScheduler-1----&gt;处理：1</span><br><span class="line">处理线程：RxSingleScheduler-1----&gt;处理：2</span><br><span class="line">接收线程：RxSingleScheduler-1----&gt;接收：1</span><br><span class="line">接收线程：RxSingleScheduler-1----&gt;接收：2</span><br></pre></td></tr></table></figure><p>通过Schedulers.single()将数据的发射，处理，接收在Schedulers.single()的线程单例中排队执行，当此线程中有任务执行时，其他任务将会按照先进先出的顺序依次执行。</p><p><strong>下面举个完整的示例，需求是这样的：</strong></p><p>  （1）在io线程请求服务器数据；<br><br>  （2）请求之前需要在主线程显示 Loading dialog；<br><br>  （3）数据返回后在 computation() 处理；<br><br>  （4）处理完成后在 io() 存入数据库；<br><br>  （5）主线程 更新UI；<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .create(new ObservableOnSubscribe&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(ObservableEmitter&lt;List&lt;String&gt;&gt; emitter) throws Exception &#123;</span><br><span class="line">            System.out.println(&quot;IO线程----&gt;发起网络请求，请求服务器数据&quot;);</span><br><span class="line">            // TODO: 2019/8/23 请求网络</span><br><span class="line">            List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">            for (int i=0;i&lt;10;i++)&#123;</span><br><span class="line">                list.add(&quot;数据&quot;+i);</span><br><span class="line">            &#125;</span><br><span class="line">            emitter.onNext(list);</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Disposable disposable) throws Exception &#123;</span><br><span class="line">            System.out.println(&quot;UI主线程----&gt;显示 Loading dialog&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .observeOn(Schedulers.computation())</span><br><span class="line">    .filter(new Predicate&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean test(List&lt;String&gt; list) throws Exception &#123;</span><br><span class="line">            //list 从服务器请求的数据</span><br><span class="line">            System.out.println(&quot;计算线程处理----&gt;处理数据&quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observeOn(Schedulers.io())</span><br><span class="line">    .doOnNext(new Consumer&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(List&lt;String&gt; filterList) throws Exception &#123;</span><br><span class="line">            //filterList 处理后的数据</span><br><span class="line">            System.out.println(&quot;IO线程----&gt;存入数据库&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(new Consumer&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(List&lt;String&gt; list) throws Exception &#123;</span><br><span class="line">            //str 处理之后的数据</span><br><span class="line">            System.out.println(&quot;UI主线程----&gt;显示数据更新UI&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>打印日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UI主线程----&gt;显示 Loading dialog</span><br><span class="line">IO线程----&gt;发起网络请求，请求服务器数据</span><br><span class="line">计算线程处理----&gt;处理数据</span><br><span class="line">IO线程----&gt;存入数据库</span><br><span class="line">UI主线程----&gt;显示数据更新UI</span><br></pre></td></tr></table></figure><p>通过以上示例，我们可以总结subscribeOn和observeOn的用法如下:</p><p>subscribeOn 用来声明上游事件发送时的所在线程，若多次设定，上游会运行在 最早 的一次调用声明的线程中。<br><br>observeOn 指定下游操作所在的线程。若多次设定，每次均起作用。如若不指定下游线程，则默认在上游所在的线程中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;首先了解 Schedulers 和 Scheduler 的概念&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scheduler 是负责执行任务的单
      
    
    </summary>
    
    
      <category term="开发" scheme="http://wblog.work/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Rxjava" scheme="http://wblog.work/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>【转】java反射基础学习（附demo）</title>
    <link href="http://wblog.work/%E5%8F%8D%E5%B0%84/"/>
    <id>http://wblog.work/反射/</id>
    <published>2019-09-20T01:21:27.000Z</published>
    <updated>2019-09-23T09:47:36.236Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是反射（Reflection）"><a href="#什么是反射（Reflection）" class="headerlink" title="什么是反射（Reflection）"></a>什么是反射（Reflection）</h4><p>Java 反射机制是在<strong>运行状态</strong>中，对于任意一个类，都能够知道这个类的所有的属性和方法；对于任意一个对象，都能够调用它的任何方法和属性；也就是说反射机制在程序运行的过程中，能够获取任何已知名称的类的内部信息，并在执行过程中，动态生成对象实体、对fields设值、或者调用methods。</p><p>这种在程序运行过程中，动态获取类的信息以及动态调用方法的功能称为Java的反射机制。</p><h4 id="Reflection-API-简介"><a href="#Reflection-API-简介" class="headerlink" title="Reflection API 简介"></a>Reflection API 简介</h4><p>在JDK中，主要由一下类来实现Java反射机制，这些类（出来Class）都位于java.lang.reflect包中。</p><table><thead><tr><th>类名</th><th>含义</th></tr></thead><tbody><tr><td>Class 类</td><td>代表某个具体的类和接口，位于java.lang包下</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method类</td><td>代表类或者接口上的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr><tr><td>Array类</td><td>提供了动态创建数组，以及访问数组的元素的静态方法</td></tr></tbody></table><h5 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h5><p>Class本身就是一个类，Class是该类的名称，注意不要理解成类类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest&#123;&#125;</span><br></pre></td></tr></table></figure><p>注意上面的class的首字母是小写的，他表示一中类类型，但是Class是一个类，相当于上面定义的MyTest类。</p><p>在Java中，每个class都有一个相应的Class对象，也就是说，当我们编写一个类，编译成.class文件后，就会产生一个Class对象，用于表达这个类的类型信息。无论某个类有多少个对象，这些对象都会对应同一个Class对象。</p><p>Class的获取方式：</p><ul><li><p>使用Class类的静态方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; testClazz01 = Class.forName(&quot;com.zwb.MyTest&quot;);</span><br></pre></td></tr></table></figure></li><li><p>使用类的.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;? extends MyTest&gt; testClazz02 = MyTest.class;</span><br></pre></td></tr></table></figure></li><li><p>使用对象的getClass()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyTest myTest = new MyTest();</span><br><span class="line">Class&lt;? extends MyTest&gt; testClazz03 = myTest.getClass();</span><br></pre></td></tr></table></figure></li></ul><h5 id="Class相关的方法"><a href="#Class相关的方法" class="headerlink" title="Class相关的方法"></a>Class相关的方法</h5><ul><li>获得<strong>类相关</strong>的方法</li></ul><table><thead><tr><th>方法名</th><th>含义</th></tr></thead><tbody><tr><td>asSubClass(Class<u> clazz)</u></td><td>把传递的类的对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或者接口的对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，数组中包含该类中所有具有public属性的类和接口类的对象</td></tr><tr><td>getDeclaredClasses()</td><td>返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td>forName(String className)</td><td>根据类名返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstance()</td><td>创建类的实例</td></tr><tr><td>getPackage</td><td>获取类的包</td></tr><tr><td>getSimpleName</td><td>获取类的名字</td></tr><tr><td>getSuperclass</td><td>获取父类的名字</td></tr><tr><td>getInterfaces</td><td>获取当前类实现的接口</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li>获得类中<strong>构造器</strong>相关的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td>getConstructors()</td><td>获得该类的所有公有构造方法</td></tr><tr><td>getDeclaredConstructors(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的构造方法</td></tr><tr><td>getDeclaredConstructors()</td><td>获得该类所有构造方法</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li>获得类中<strong>方法</strong>相关的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>根据方法名和参数，返回一个具体的具有public属性的方法</td></tr><tr><td>getMethods()</td><td>返回所有具有public属性的方法数组（包括从父类继承的public方法和实现接口的public方法）</td></tr><tr><td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>根据方法名和参数，返回一个具体的方法（不分public和非public属性）</td></tr><tr><td>getDeclaredMethods()</td><td>返回该类中的所有的方法数组（不分public和非public属性）</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li>获得类中<strong>属性</strong>相关的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getField(String name)</td><td>根据变量名，返回一个具体的具有public属性的成员变量</td></tr><tr><td>getFields()</td><td>返回具有public属性的成员变量的数组</td></tr><tr><td>getDeclaredField(String name)</td><td>根据变量名，返回一个成员变量（不分public和非public属性）</td></tr><tr><td>getDeclaredFields()</td><td>返回所有成员变量组成的数组（不分public和非public属性）</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li>获得类中<strong>注解</strong>相关的方法</li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>getAnnotation(Class<t>  annotationClass)</t></td><td>返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td>getAnnotations()</td><td>返回该类所有的公有注解对象</td></tr><tr><td>getDeclaredAnnotation(Class<t>  annotationClass)</t></td><td>返回该类中与参数类型匹配的<strong>直接修饰的</strong>所有注解对象</td></tr><tr><td>getDeclaredAnnotations()</td><td>返回该类所有的<strong>直接修饰的</strong>注解对象</td></tr><tr><td><a href>示例</a></td><td></td></tr></tbody></table><ul><li><p>其他重要的方法</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>isAnnotation()</td><td>判断是否是注解</td></tr><tr><td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td><td>判断是否是指定类型的注解</td></tr><tr><td>isAnonymousClass()</td><td>判断是否是匿名类</td></tr><tr><td>isArray()</td><td>判断是否是数组类</td></tr><tr><td>isEnum()</td><td>判断是否是枚举类</td></tr><tr><td>isInstance(Object obj)</td><td>判断obj是否是该类的实例</td></tr><tr><td>isInterface()</td><td>判断是否是接口类</td></tr></tbody></table></li></ul><h5 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h5><p>Field代表类的成员变量（属性）</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>get(Object obj)</td><td>获取obj对应的属性值</td></tr><tr><td>set(Object obj,Object value)</td><td>设置obj对应的属性值</td></tr><tr><td>equals(Object obj)</td><td>判断与obj是否相等</td></tr></tbody></table><h5 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h5><p>Method代表类的方法</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>invoke(Object receiver,Object… args)</td><td>传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><p>参数receiver指明了调用对象，参数args指明该方法所需要接收的参数。由于是运行时动态的调用类的方法，无法提前知道参数类型和返回值，所以传入和返回的都是Object<br>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class MyTest&#123;</span><br><span class="line"> private int testInvoke(int i)&#123;</span><br><span class="line">return i*10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt; classTest = Class.forName(&quot;com.zwb.MyTest&quot;);</span><br><span class="line">Method methodTest = MyTest.getDeclaredMethod(&quot;testInvoke&quot;,int.class);</span><br><span class="line">methodTest.setAccessible(true);</span><br><span class="line">Object objectTest = classTest.newInstance();</span><br><span class="line">int result = (int) methodTest.invoke(objectTest,1);</span><br><span class="line">// result=10</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>这里主要是学习反射最基础的语法和相关的API，一些深层的知识点请自行查阅资料。<br>以上都是参考别人总结的（绝不是copy，都是在理解的基础上一字一句自己敲的），示例是我根据相关的API自己敲的，古人云：眼过千遍不如手过一遍。<br>如对原文作者又冒犯之处，请及时联系立删</p><p>参考：<br><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">https://www.jianshu.com/p/9be58ee20dee</a><br><a href="https://www.cnblogs.com/crazypebble/archive/2011/04/13/2014582.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazypebble/archive/2011/04/13/2014582.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是反射（Reflection）&quot;&gt;&lt;a href=&quot;#什么是反射（Reflection）&quot; class=&quot;headerlink&quot; title=&quot;什么是反射（Reflection）&quot;&gt;&lt;/a&gt;什么是反射（Reflection）&lt;/h4&gt;&lt;p&gt;Java 反射机制是
      
    
    </summary>
    
    
      <category term="开发" scheme="http://wblog.work/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://wblog.work/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【转】Java注解基础学习</title>
    <link href="http://wblog.work/%E6%B3%A8%E8%A7%A3/"/>
    <id>http://wblog.work/注解/</id>
    <published>2019-09-20T01:21:27.000Z</published>
    <updated>2019-09-23T09:47:39.168Z</updated>
    
    <content type="html"><![CDATA[<h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>注解，标签</p><p>其实同class和interface一样，注解也属于一种类型。它是在Java SE 5.0版本中开始引入的概念。</p><h5 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h5><p>注解通过 @ interface 关键字进行定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public @interface TestAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的形式跟接口很类似，不过前面加了@符号。 上面的代码就创建了一个名字为TestAnnotation的注解。</p><p>可以简单理解为创建了一张名字为TestAnnotation的标签</p><h5 id="注解的应用"><a href="#注解的应用" class="headerlink" title="注解的应用"></a>注解的应用</h5><p>上面创建了一个注解，那么注解怎么使用呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@TestAnnotation</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个类 Test，然后在类上面加上 @ TestAnnotation 就可以用。<br>你可以简单理解为将 TestAnnotation 这个张标签贴到Test这个类上面。</p><p>不过，想要注解能够正常工作，还需介绍一下 元注解。</p><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><p>元注解是可以注解到注解上的注解，或者说元注解是一种基本注解，但是它能够应用到其他的注解上面。</p><p>如果难于理解的话，可以这样理解。元注解就是一种标签，但是它是一张特殊的标签，<br>它的作用和目的就是给其他普通的标签进行解释说明的。</p><p>元注解有 @Retention、 @Documented、 @Target、 @Inherited、 @Repeatable 5种。</p><h6 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h6><p>Retention的英文意为保留期的意思。当@Retention 引用到一个注解上的时候，它解释了这个注解的存活时间。</p><p>源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public @interface Retention &#123;</span><br><span class="line">    RetentionPolicy value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码可以看出，其有一个属性value，返回一个枚举 RetentionPolicy 类型，有3种类型：</p><p>RetentionPolicy.SOURCE： 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽略。</p><p>RetentionPolicy.CLASS：注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</p><p>RetentionPolicy.RUNTIME：注解可以保留到程序运行的时候，它会被加载进入到JVM中，所以在程序运行时可以获取到它们。</p><p>我们可以通过这样的方式类加深理解，@Retention 去给一张标签解释的时候，它指定了这张标签的时间。@Retention相当于给一张标签上面盖了一张时间戳，时间戳指明了标签张贴的时间周期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface TestAnnotation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，我们指定了TestAnnotation 可以在程序运行周期被获取到，因次它的生命周期非常长。</p><h6 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h6><p>顾名思义，这个元注解肯定和文档有关。它的作用是能够将注解中的元素包含到Javadoc中取。</p><h6 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h6><p>Target是目标的意思，@Target指定了注解运用的地方。也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="line">public @interface Target &#123;</span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看出，其有一个属性value，返回一个枚举 ElementType 类型的数组，这个数组的值就代表了可以在那些场景。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public enum ElementType &#123;</span><br><span class="line">    /** 允许被修饰的注解作用在类、接口和枚举上 */</span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    /** 允许作用在属性字段上，包括enum实例 */</span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    /** 允许作用在方法上 */</span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    /** 允许作用在方法参数上 */</span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    /** 允许作用在构造器上 */</span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    /** 允许作用在局部变量上 */</span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    /** 允许作用在注解上(应用于另一个注解上) */</span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    /** 允许作用在包上 */</span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 允许作用在类型参数声明（1.8新加入）</span><br><span class="line">     */</span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 允许作用在类型使用声明（1.8新加入)</span><br><span class="line">     */</span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如 @Override 注解使用了@Target(ElementType.METHOD)，意味着，它只能注解方法，不能注解属性或者类，或者其他情况。<br>当未指定Target值时，则可以用于任何元素上，多个值则使用{}包含并用 “,”隔开，比如：<br><code>@Target(value={CONSTRUCTOR,FIELD,METHOD}</code><br>该注解既可注解构造方法、字段和方法。</p><h6 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h6><p>Inherited是继承的意思，其让被修饰的注解拥有被继承的能力。</p><p>一个被@Inherited注解了的注解 修饰了一个父类，如果他的子类没有被其他注解修饰，则他的子类也继承了父类的注解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/** 自定义注解*/</span><br><span class="line">@Inherited</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">public @interface TestAnnotation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 父类标注 自定义注解 */</span><br><span class="line">@TestAnnotation</span><br><span class="line">public class Father&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/** 子类 */</span><br><span class="line">public class Son extentx Father&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/** 测试子类获取父类自定义注解*/</span><br><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">//获取Son的class对象</span><br><span class="line">Class&lt;Son&gt; sonClass = Son.class;</span><br><span class="line">//获取Son类上的注解TestAnnotation可以执行成功</span><br><span class="line">TestAnnotation annotation = sonClass.getAnnotation(TestAnnotation.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解TestAnnotation被@Inherited修饰，之后类Father被TestAnnotation注解，类Son继承了Father类，类Son也就拥有TestAnnotation这个注解。</p><p>可以这样理解：</p><p>老子非常有钱，所以人们给他贴了一张标签叫做富豪。</p><p>老子的儿子长大后，只要没和老子断绝父子关系，虽然别人没给他贴富豪的标签，但他自然也是富豪。</p><p>老子的孙子长大后，自然也是富豪。</p><p>这就是人们口中戏称的富一代，富二代，富三代。虽然叫法不同，好像好多个标签，但其实事情的本质也就是他们有一张共同的标签，也就是老子身上的那张富豪的标签。</p><h6 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h6><p>Repeatable是可重复的意思，@Repeatable是Java1.8才加进来的，所有算是一个新的特效。</p><p>别这个元注解修饰的注解 可以多次修饰同一个对象，但是每次注解又代表不同的含义。<br>比如：一个人既是程序员，又是成品经理，同时也是画家</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/** 定义一个容器注解*/</span><br><span class="line">@interface Persons&#123;</span><br><span class="line">Person[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 被Repeatable修饰的注解 */</span><br><span class="line">@Repeatable(Persons.class)</span><br><span class="line">@interface Person&#123;</span><br><span class="line">String role() default &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Person(role=&quot;artist&quot;)</span><br><span class="line">@Person(role=&quot;coder&quot;)</span><br><span class="line">@Person(role=&quot;PM&quot;)</span><br><span class="line">class SuperMan&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码@Repeatable注解了Person。而@Repeatable后面括号中的类相当于一个容器注解。</p><p>什么是容器注解呢？就是存放其他注解的地方。他本身也是一个注解。</p><p>容器注解，他里面必须要有一个value的属性，注意它是数组。</p><p>如果不好理解的话，可以这样理解。Persons 是一张总的标签，上面贴满了Person这种类型但内容不一样的标签。把Person给SuperMan贴上，相当于同时给他贴上了程序员、产品经理、画家的标签。</p><p>我们可能对于@Person(role=”PM”) 括号里的内容感兴趣，他其实就是Person这个注解的role属性赋值为PM。</p><h5 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h5><p>注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。</p><p>注解本质上就是一个Annotation接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/** Annotatioin 接口源码*/</span><br><span class="line">public interface Annotation&#123;</span><br><span class="line"></span><br><span class="line">boolean equals（Object obj;</span><br><span class="line"></span><br><span class="line">int hashCode();</span><br><span class="line"></span><br><span class="line">String toString();</span><br><span class="line"> </span><br><span class="line">Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上源码，我们知道注解本身就是Annotation接口的子接口，也就是说注解其实可以有属性和方法，但是接口的数据都是static final的，对于注解来说没有什么意义，而我们定义的接口方法就相当于是注解的属性，也就对应了前面所说的为什么注解只有属性成员变量，其实他就是接口的方法，这就为什么成员变量会有方法，不同于接口的是我们可以在注解的括号中给成员变量赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentioniPolicy.RUNTIME)</span><br><span class="line">public @interface TestAnnotation&#123;</span><br><span class="line">String name() default &quot;zk&quot;;</span><br><span class="line">int age() default 18;</span><br><span class="line">&#125;</span><br><span class="line">@TestAnnotation(name=&quot;zhangke&quot;,age=&quot;25&quot;)</span><br><span class="line">public class Person&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码定义了TestAnnotation 这个注解拥有name和age两个属性。用default 指定默认值。如果有default设置了默认值时，也可以无需在TestAnnotation后面的括号中进行赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@TestAnnotation()</span><br><span class="line">public class Person&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赋值的方式就是在注解的括号中用“,”隔开分别给对应的属性赋值。<br>如果注解的只有一个属性时，可以直接把属性值写到括号中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentioniPolicy.RUNTIME)</span><br><span class="line">public @interface TestAnnotation&#123;</span><br><span class="line">String name();</span><br><span class="line">&#125;</span><br><span class="line">@TestAnnotation(zhangke)</span><br><span class="line">public class Person&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，在注解中定义属性时有一下几种的类型：<br>1、基本数据类型<br>2、String<br>3、枚举<br>4、注解<br>5、类、接口<br>6、以上类型的一维数组类型</p><h5 id="Java-内置的注解"><a href="#Java-内置的注解" class="headerlink" title="Java 内置的注解"></a>Java 内置的注解</h5><p>Java内置的直接共有5个<br>@Override：<br>这个大家很熟悉了，让编译器检查被标记的方法，保证其重写了父类的某一个方法。此注解只能标记方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Deprecated：<br>标记某些程序元素已经过时，程序员请不要再使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="line">public @interface Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SuppressWarnings：<br>阻止警告的意思。调用了被@Deprecated注解后的方法，编译器会警告提醒，但是开发者不想看到这些警告，可以使用@SuppressWarnings达到目的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其内部有个String数组类型的属性，根据传入的值来取消相应的警告：<br>deprecation：使用了不赞成使用的类或方法时的警告；<br>unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型;<br>fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;<br>path：在类路径、源文件路径等中有不存在的路径时的警告;<br>serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告;<br>finally：任何 finally 子句不能正常完成时的警告;<br>all：关于以上所有情况的警告</p><p>@SafeVarargs(Java7 新增)：<br>@SuppressWarnings可以用在各种需要取消警告的地方，而 @SafeVarargs主要用在取消参数的警告。就是说编译器如果检查到你对方法参数的操作，有可能发生问题时会给出警告，但是你很自（任）性，老子不要警告，于是你就加上了这个标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD&#125;)</span><br><span class="line">public @interface SafeVarargs &#123;&#125;</span><br></pre></td></tr></table></figure><p>@FunctionalInterface(Java8 新增)：<br>标记型注解，告诉编译器检查被标注的接口是否是一个函数接口，即检查这个接口是否只包含一个抽象方法，只有函数接口才可以使用Lambda表达式创建实例。</p><h5 id="如何使用注解"><a href="#如何使用注解" class="headerlink" title="如何使用注解"></a>如何使用注解</h5><p>前面我们学习了注解的基本语法，那注解具体怎么使用呢？<br>这时候就需要用到APT（Annotation Processing Tool），访问和处理Annotation的工具，那么APT是具体怎么读取注解的属性信息的呢，那就是反射。<br>Annotation接口是所有注解的父接口（需要通过发编译查看），在java.lang.reflect发射包下存在一个叫AnnotationElement的接口，其表示程序中可以接受注解的程序元素，比如类，方法，字段，构造方法，包等等。而Java为使用反射的主要类实现了此接口，如Class类、Field类、Method类、Constructor类等。</p><p>当我们通过反射技术获取到反射包内的那些类型的实例后，就可以通过AnnotationElement接口的API方法来获取注解信息了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**是否存在对应 Annotation 对象*/</span><br><span class="line"> public boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass) &#123;</span><br><span class="line">       return GenericDeclaration.super.isAnnotationPresent(annotationClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**获取 Annotation 对象*/</span><br><span class="line">   public &lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationClass) &#123;</span><br><span class="line">       Objects.requireNonNull(annotationClass);</span><br><span class="line"></span><br><span class="line">       return (A) annotationData().annotations.get(annotationClass);</span><br><span class="line">   &#125;</span><br><span class="line">/**获取所有 Annotation 对象数组*/   </span><br><span class="line">public Annotation[] getAnnotations() &#123;</span><br><span class="line">       return AnnotationParser.toArray(annotationData().annotations);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>下面结合前面的例子，我们来获取下注解的属性，在获取之前我们自定义的注解必须使用元注解@Retention(RetentionPolicy.RUNTIME)。</p><p>待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h4&gt;&lt;p&gt;注解，标签&lt;/p&gt;
&lt;p&gt;其实同class和interface一样，注解也属于一种类型。它是在Java SE 5.0版本中开始引入的概念。&lt;
      
    
    </summary>
    
    
      <category term="开发" scheme="http://wblog.work/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://wblog.work/tags/Java/"/>
    
  </entry>
  
</feed>
